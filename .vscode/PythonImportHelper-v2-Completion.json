[
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "task",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "between",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "after_this_request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "send",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "send",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "send",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "isExtraImport": true,
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "isExtraImport": true,
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pycountry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycountry",
        "description": "pycountry",
        "detail": "pycountry",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "AdminBp",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "AdminBp",
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "isExtraImport": true,
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Repository",
        "description": "User.Repository",
        "isExtraImport": true,
        "detail": "User.Repository",
        "documentation": {}
    },
    {
        "label": "redis_store",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "socketio",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "redis_store",
        "importPath": "User",
        "description": "User",
        "isExtraImport": true,
        "detail": "User",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "isExtraImport": true,
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "isExtraImport": true,
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "isExtraImport": true,
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "LocalProxy",
        "importPath": "werkzeug.local",
        "description": "werkzeug.local",
        "isExtraImport": true,
        "detail": "werkzeug.local",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Decorators",
        "description": "User.Decorators",
        "isExtraImport": true,
        "detail": "User.Decorators",
        "documentation": {}
    },
    {
        "label": "TFAutoModelForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "TFAutoModelForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoConfig",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "softmax",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "User.Models",
        "description": "User.Models",
        "isExtraImport": true,
        "detail": "User.Models",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "FlaskRedis",
        "importPath": "flask_redis",
        "description": "flask_redis",
        "isExtraImport": true,
        "detail": "flask_redis",
        "documentation": {}
    },
    {
        "label": "WebsiteUser",
        "kind": 6,
        "importPath": "Load Test.locustfile",
        "description": "Load Test.locustfile",
        "peekOfCode": "class WebsiteUser(HttpUser):\n    wait_time = between(1, 2)\n    @task\n    def view_homepage(self):\n        self.client.get(\"/about\")",
        "detail": "Load Test.locustfile",
        "documentation": {}
    },
    {
        "label": "AdminBp",
        "kind": 5,
        "importPath": "User.Admin.route_studenthub_admin",
        "description": "User.Admin.route_studenthub_admin",
        "peekOfCode": "AdminBp = Blueprint(\"Admin\",__name__,template_folder=\"templates\")",
        "detail": "User.Admin.route_studenthub_admin",
        "documentation": {}
    },
    {
        "label": "creation_admin",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def creation_admin():\n    admins = Admin.query.all()\n    # Check if there are no superadmins\n    superadmins_exist = any(admin.superadmin == \"Oui\" for admin in admins)\n    if session.get('superadmin') == 'Oui' or (not superadmins_exist and session.get('admin') == 'connect'):\n        if request.method == \"POST\":\n            mail = request.form['mail']\n            mdp = request.form['motdepasse']\n            superadmin = request.form['role']\n            admin=Admin(mail=mail,mdp=mdp,superadmin=superadmin)",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "admin_list",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def admin_list():\n    # Fetch all admin records from the database\n    admins = Admin.query.all()\n    return render_template('admin_list.html', admins=admins,n=vue())\n@AdminBp.route('/remove_admin/<int:admin_id>')\ndef remove_admin(admin_id):\n    if session.get('superadmin')=='Oui':\n        admin = Admin.query.get(admin_id)\n        if admin:\n            if admin.superadmin == \"Oui\":",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "remove_admin",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def remove_admin(admin_id):\n    if session.get('superadmin')=='Oui':\n        admin = Admin.query.get(admin_id)\n        if admin:\n            if admin.superadmin == \"Oui\":\n                flash(\"Superadmin cannot be removed.\", \"warning\")\n            else:\n                db.session.delete(admin)\n                db.session.commit()\n                flash(\"Admin removed successfully.\", \"success\")",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "ajouter_etudiant",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def ajouter_etudiant():\n    if session.get('admin')=='connect':\n        nationalites_disponibles = [(country.name, country.alpha_2) for country in pycountry.countries]\n        nationalites_disponibles.sort(key=lambda x: x[0])\n        if request.method == 'POST':\n            nom = request.form['nom']\n            prenom = request.form['prenom']\n            nationalite = request.form['nationalite']\n            mail = request.form['mail']\n            age = int(request.form['ageEtudiant'])  # Assurez-vous que l'âge est un entier",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "ajouter_prof",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def ajouter_prof():\n    if session.get('admin')=='connect':\n        nationalites_disponibles = [(country.name, country.alpha_2) for country in pycountry.countries]\n        nationalites_disponibles.sort(key=lambda x: x[0])\n        if request.method == 'POST':\n            nom = request.form['nom']\n            prenom = request.form['prenom']\n            nationalite = request.form['nationalite']\n            mail = request.form['mail']\n            formation=request.form['formation']",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "affecter_groupe",
        "kind": 2,
        "importPath": "User.Admin.routes_creation_admin",
        "description": "User.Admin.routes_creation_admin",
        "peekOfCode": "def affecter_groupe():\n    if session.get('admin')=='connect':\n        # groupe_id=request.form[\"groupe\"]\n        groupes = []\n        for groupe in groupelangue.query.all():\n            nb_abonnes = AbonnementLangue.query.filter_by(id_groupe=groupe.id).count()\n            if nb_abonnes < 6:\n                groupes.append(groupe)\n        if len(groupes)==0:\n            groupe_id=None",
        "detail": "User.Admin.routes_creation_admin",
        "documentation": {}
    },
    {
        "label": "effacerevent",
        "kind": 2,
        "importPath": "User.Admin.routes_events",
        "description": "User.Admin.routes_events",
        "peekOfCode": "def effacerevent(idev):\n    if session.get('admin')=='connect':\n        event = Evenement.query.get(idev) \n        db.session.delete(event)\n        db.session.commit()\n        url='Event.evenement'\n        return redirect(url_for(url))\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/details_evenement/<int:idev>',methods=[\"POST\",\"GET\"])",
        "detail": "User.Admin.routes_events",
        "documentation": {}
    },
    {
        "label": "details_evenement",
        "kind": 2,
        "importPath": "User.Admin.routes_events",
        "description": "User.Admin.routes_events",
        "peekOfCode": "def details_evenement(idev) :\n    if session.get('admin')=='connect':\n        evenement= Evenement.query.filter_by(id_evenement=idev).first()\n        n=vue()\n        return render_template('detailsevenement.html',evenement=evenement,n=n)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/evenements')\ndef evenements():\n    if session.get('admin')=='connect':",
        "detail": "User.Admin.routes_events",
        "documentation": {}
    },
    {
        "label": "evenements",
        "kind": 2,
        "importPath": "User.Admin.routes_events",
        "description": "User.Admin.routes_events",
        "peekOfCode": "def evenements():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template('evenements.html',n=n)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/get_events', methods=['GET'])\ndef get_events():\n    if session.get('admin')=='connect':\n        try:",
        "detail": "User.Admin.routes_events",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "User.Admin.routes_events",
        "description": "User.Admin.routes_events",
        "peekOfCode": "def get_events():\n    if session.get('admin')=='connect':\n        try:\n            joined_data = db.session.query(Evenement.id_evenement,Evenement.id_organisateur,Evenement.Nom, Evenement.date, Evenement.type_ev, Evenement.nbplace, Evenement.nbplace_occupe, Evenement.lien, Evenement.live, Evenement.vue, Evenement.description, Evenement.photo, Evenement.statut,User.nom,User.prenom,User.id).\\\n                join(User, User.id == Evenement.id_organisateur).all()\n            professeurs_list = []\n            for data in joined_data:\n                prof_dict = {\n                    'id':data.id_evenement,\n                    'userid':data.id,",
        "detail": "User.Admin.routes_events",
        "documentation": {}
    },
    {
        "label": "chiffrelangue",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def chiffrelangue():\n    if session.get('admin')=='connect':\n        result = db.session.query(AbonnementLangue.nom, func.count(AbonnementLangue.id_abonne)).group_by(AbonnementLangue.nom).all()\n    # Créer un dictionnaire pour stocker les résultats\n        nombre_abonnes_par_langue = {nom_langue: count for nom_langue, count in result}\n            # Define the dictionary of prices per duration\n        prix_par_duree = {\n            1: 8,\n            3: 24,\n            6: 40",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "get_langue",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def get_langue(langue):\n    if session.get('admin')=='connect':\n        groupes = groupelangue.query.filter_by(nom=langue).all()\n        groupe_ids = [groupe.id for groupe in groupes]\n        return jsonify({\"groupe_ids\": groupe_ids})\n    else:\n        return redirect(url_for('Main.connexion'))\n# Charger les sujets depuis le fichier JSON\ndef load_sujet():\n    with open('langue/sujet.json', 'r') as f:",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "load_sujet",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def load_sujet():\n    with open('langue/sujet.json', 'r') as f:\n        suj = json.load(f)[\"conversations\"]\n    return suj\ndef get_available_saturdays():\n    # Obtenir la date actuelle\n    current_date = datetime.now()\n    # Trouver le prochain samedi à 16h00\n    next_saturday = current_date + timedelta(days=(5 - current_date.weekday()) % 7)\n    next_saturday = next_saturday.replace(hour=16, minute=0, second=0, microsecond=0)",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "get_available_saturdays",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def get_available_saturdays():\n    # Obtenir la date actuelle\n    current_date = datetime.now()\n    # Trouver le prochain samedi à 16h00\n    next_saturday = current_date + timedelta(days=(5 - current_date.weekday()) % 7)\n    next_saturday = next_saturday.replace(hour=16, minute=0, second=0, microsecond=0)\n    # Charger les sujets à partir du fichier JSON\n    sujets = load_sujet()\n    # Générer les prochains samedis non définis dans le JSON\n    available_saturdays = []",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "sujet",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def sujet():\n    if session.get('admin')=='connect':\n        suj=load_sujet()\n        # Initialiser la liste sujets\n        sujets = []\n        if request.method == \"POST\":\n            date = request.form[\"date\"]\n            sujet = request.form[\"sujet\"]\n            # Charger les sujets à partir du fichier JSON existant\n            with open('langue/sujet.json', 'r') as f:",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "groupes",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def groupes():\n    if session.get('admin')=='connect':\n        groupes = groupelangue.query.all()\n        return render_template(\"groupes.html\", groupes=groupes)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route(\"/groupe/<int:groupe_id>\")\ndef groupe_detail(groupe_id):\n    if session.get('admin')=='connect':\n        groupe = groupelangue.query.get(groupe_id)",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "groupe_detail",
        "kind": 2,
        "importPath": "User.Admin.routes_langues",
        "description": "User.Admin.routes_langues",
        "peekOfCode": "def groupe_detail(groupe_id):\n    if session.get('admin')=='connect':\n        groupe = groupelangue.query.get(groupe_id)\n        participants = AbonnementLangue.query.filter_by(id_groupe=groupe_id).all()\n        return render_template(\"detail_groupe.html\", groupe=groupe, participants=participants)\n    else:\n        return redirect(url_for('Main.connexion'))\n# END GESTION LANGUE",
        "detail": "User.Admin.routes_langues",
        "documentation": {}
    },
    {
        "label": "reclamations_non_traitees",
        "kind": 2,
        "importPath": "User.Admin.routes_reclamations",
        "description": "User.Admin.routes_reclamations",
        "peekOfCode": "def reclamations_non_traitees():\n    if session.get('admin')=='connect':\n        reclamations = Reclamation.query.filter_by(traite='non').all()\n        for reclamation in reclamations:\n            reclamation.vue = 'oui'\n        db.session.commit()\n        n=vue()\n        return render_template('reclamations_non_traitees.html', reclamations=reclamations,n=n)\n    else:\n        return redirect(url_for('Main.connexion'))",
        "detail": "User.Admin.routes_reclamations",
        "documentation": {}
    },
    {
        "label": "traiter_reclamation",
        "kind": 2,
        "importPath": "User.Admin.routes_reclamations",
        "description": "User.Admin.routes_reclamations",
        "peekOfCode": "def traiter_reclamation(reclamation_id):\n    if session.get('admin')=='connect':\n        reclamation = Reclamation.query.get_or_404(reclamation_id)\n        reclamation.traite = 'oui'\n        db.session.commit()\n        return redirect(url_for('Main.reclamations_non_traitees'))\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/other')\ndef other():",
        "detail": "User.Admin.routes_reclamations",
        "documentation": {}
    },
    {
        "label": "other",
        "kind": 2,
        "importPath": "User.Admin.routes_reclamations",
        "description": "User.Admin.routes_reclamations",
        "peekOfCode": "def other():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"other.html\",n=n)\n    else:\n        return redirect(url_for('Main.connexion'))\n#END GESTION RECLAMATION",
        "detail": "User.Admin.routes_reclamations",
        "documentation": {}
    },
    {
        "label": "demanderetrait",
        "kind": 2,
        "importPath": "User.Admin.routes_retrait",
        "description": "User.Admin.routes_retrait",
        "peekOfCode": "def demanderetrait():\n    if session.get('admin')=='connect':\n        dem=Retrait.query.filter_by(statut=\"attente\")\n        return render_template(\"demanderetrait.html\",demande=dem)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/detailsretrait/<id>')\ndef detailsretrait(id):\n    if session.get('admin')=='connect':\n        dem=Retrait.query.filter_by(id=id).first()",
        "detail": "User.Admin.routes_retrait",
        "documentation": {}
    },
    {
        "label": "detailsretrait",
        "kind": 2,
        "importPath": "User.Admin.routes_retrait",
        "description": "User.Admin.routes_retrait",
        "peekOfCode": "def detailsretrait(id):\n    if session.get('admin')=='connect':\n        dem=Retrait.query.filter_by(id=id).first()\n        prof=Prof.query.filter_by(id=id)\n        user=User.query.filter_by(id=prof.id_user_p)\n        return render_template(\"detailsretrait.html\",demand=dem,user=user)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/validerretrait/<id>', methods=['GET'])\ndef tvaliderretrait(id):",
        "detail": "User.Admin.routes_retrait",
        "documentation": {}
    },
    {
        "label": "tvaliderretrait",
        "kind": 2,
        "importPath": "User.Admin.routes_retrait",
        "description": "User.Admin.routes_retrait",
        "peekOfCode": "def tvaliderretrait(id):\n    if session.get('admin')=='connect':\n        dem = Retrait.query.get_or_404(id)\n        dem.statut = 'valide'\n        db.session.commit()\n        prof=Prof.query.filter_by(id=dem.id_demandeur).first()\n        prof.solde=prof.solde-dem.montant_retrait\n        db.session.commit()\n        return redirect(url_for('Main.demanderetrait'))\n    else:",
        "detail": "User.Admin.routes_retrait",
        "documentation": {}
    },
    {
        "label": "room_list",
        "kind": 2,
        "importPath": "User.Admin.routes_room",
        "description": "User.Admin.routes_room",
        "peekOfCode": "def room_list():\n    if session.get('admin')=='connect':\n        rooms = Room.query.all()\n        return render_template('room_list.html', rooms=rooms)\n    else:\n        return redirect(url_for('Main.connexion'))\n@AdminBp.route('/delete_room/<int:room_id>')\ndef delete_room(room_id):\n    if session.get('admin')=='connect':\n        room = Room.query.get(room_id)",
        "detail": "User.Admin.routes_room",
        "documentation": {}
    },
    {
        "label": "delete_room",
        "kind": 2,
        "importPath": "User.Admin.routes_room",
        "description": "User.Admin.routes_room",
        "peekOfCode": "def delete_room(room_id):\n    if session.get('admin')=='connect':\n        room = Room.query.get(room_id)\n        if room:\n            db.session.delete(room)\n            db.session.commit()\n        return redirect(url_for('Room.room_list'))\n    else:\n        return redirect(url_for('Main.connexion'))\n#END GESTION ROOM",
        "detail": "User.Admin.routes_room",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "User.Admin.routes_tableau_de_bord",
        "description": "User.Admin.routes_tableau_de_bord",
        "peekOfCode": "def dashboard():\n    if session.get('admin')=='connect':\n        nbuser=User.query.count()\n        prix_total = db.session.query(db.func.sum(Demande.prix)).filter(Demande.statut_payement.in_([\"payer\"])).scalar()\n        # nombre_demandes = db.session.query(Demande).filter(Demande.statut_demande.in_([\"accepte\", \"report_accepte\"])).count()\n        demande=Demande.query.count()\n        event=Evenement.query.count()\n        langue=AbonnementLangue.query.count()\n        nationalities_with_users = db.session.query(User.nationalite).distinct().all()\n        nationalities_list = [nationality[0] for nationality in nationalities_with_users]",
        "detail": "User.Admin.routes_tableau_de_bord",
        "documentation": {}
    },
    {
        "label": "nbuser",
        "kind": 2,
        "importPath": "User.Admin.routes_tableau_de_bord",
        "description": "User.Admin.routes_tableau_de_bord",
        "peekOfCode": "def nbuser():\n    if session.get('admin')=='connect':\n        nbprof=Prof.query.count()\n        nbetud=Etudiant.query.count()\n        # Comptez le nombre total d'utilisateurs\n        total_users = User.query.count()\n        # Calculez le nombre d'utilisateurs qui ne sont ni professeurs ni étudiants\n        nb_other_users = total_users - (nbprof + nbetud)\n        n=vue()\n        return render_template(\"nbuser.html\",nbetud=nbetud,nbprof=nbprof,other=nb_other_users,n=n)",
        "detail": "User.Admin.routes_tableau_de_bord",
        "documentation": {}
    },
    {
        "label": "demandedetails",
        "kind": 2,
        "importPath": "User.Admin.routes_tableau_de_bord",
        "description": "User.Admin.routes_tableau_de_bord",
        "peekOfCode": "def demandedetails():\n    if session.get('admin')=='connect':\n        demande_payer = Demande.query.filter_by(statut_payement='payer').count()\n        demande_refuse = Demande.query.filter_by(statut_demande='refuse').count()\n        demande_en_attente = Demande.query.filter_by(statut_demande='enattente').count()\n        demande_terminee = Demande.query.filter_by(statut_demande='termine').count()\n        n=vue()\n        return render_template(\"demandedetails.html\",demande_payer=demande_payer,\n                            demande_refuse=demande_refuse,\n                            demande_en_attente=demande_en_attente,",
        "detail": "User.Admin.routes_tableau_de_bord",
        "documentation": {}
    },
    {
        "label": "validerprof",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def validerprof(id):\n    if session.get('admin')=='connect':\n        user = User.query.get(id) \n        if Prof.query.filter_by(id_user_p=id).first():  \n            prof= Prof.query.filter_by(id_user_p=id).first()\n            prof.valider=\"oui\"\n            db.session.commit()\n            url=\"Admin.vuevaliderprof\"\n        return redirect(url_for(url))\n@AdminBp.route('/listeprofs')",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "listeprofs",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def listeprofs():\n    if session.get('admin')=='connect':\n        return render_template(\"listeprofs.html\")\n@AdminBp.route('/vuevaliderprof')\ndef vuevaliderprof():\n    if session.get('admin')=='connect':\n        return render_template(\"validerprof.html\")\n@AdminBp.route('/listeetudiant')\ndef listeetudiant():\n    if session.get('admin')=='connect':",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "vuevaliderprof",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def vuevaliderprof():\n    if session.get('admin')=='connect':\n        return render_template(\"validerprof.html\")\n@AdminBp.route('/listeetudiant')\ndef listeetudiant():\n    if session.get('admin')=='connect':\n        return render_template(\"listeetudiant.html\")\n@AdminBp.route('/get_professeurs', methods=['GET'])\ndef get_professeurs():\n    if session.get('admin')=='connect':",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "listeetudiant",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def listeetudiant():\n    if session.get('admin')=='connect':\n        return render_template(\"listeetudiant.html\")\n@AdminBp.route('/get_professeurs', methods=['GET'])\ndef get_professeurs():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.cv).\\\n                join(Prof, User.id == Prof.id_user_p,Prof.valider==\"oui\").all()",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "get_professeurs",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def get_professeurs():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.cv).\\\n                join(Prof, User.id == Prof.id_user_p,Prof.valider==\"oui\").all()\n            # Convert the data to a list of dictionaries\n            professeurs_list = []\n            for data in joined_data:\n                prof_dict = {",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "get_etudiants",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def get_etudiants():\n    if session.get('admin')=='connect':\n        try:\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Etudiant.age, Etudiant.formation, Etudiant.Nvdetud, Etudiant.filiere, Etudiant.ecole).\\\n                join(Etudiant, User.id == Etudiant.id_user_e).all()\n            professeurs_list = []\n            for data in joined_data:\n                prof_dict = {\n                    'id':data.id,\n                    'nom': data.nom,",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "User.Admin.routes_users",
        "description": "User.Admin.routes_users",
        "peekOfCode": "def get_user():\n    if session.get('admin')=='connect':\n        try:\n            not_in_prof = db.session.query(Prof.id_user_p)\n            not_in_etudiant = db.session.query(Etudiant.id_user_e)\n            joined_data = db.session.query(User.id, User.nom, User.mail, User.prenom, User.nationalite).\\\n                filter(User.id.notin_(not_in_prof)).\\\n                filter(User.id.notin_(not_in_etudiant)).\\\n                all()\n            professeurs_list = []",
        "detail": "User.Admin.routes_users",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "User.Configuration.config",
        "description": "User.Configuration.config",
        "peekOfCode": "class Config:\n        SQLALCHEMY_TRACK_MODIFICATIONS=os.getenv(\"TRACK_MODIFICATIONS\"),\n        DEBUG_TB_ENABLED=os.getenv(\"DEBUG_TB_ENABLED\"),\n        DEBUG_TB_INTERCEPT_REDIRECTS=os.getenv(\"DEBUG_TB_INTERCEPT_REDIRECTS\"),\n        SESSION_TYPE=os.getenv(\"SESSION_TYPE\"),\n        UPLOAD_FOLDER = '/static',\n        REDIS_URL=os.getenv(\"REDIS_URL\")\n        SECRET_KEY=os.getenv(\"SECRET_KEY\")\nclass ConfigDevelopment(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_URI\")",
        "detail": "User.Configuration.config",
        "documentation": {}
    },
    {
        "label": "ConfigDevelopment",
        "kind": 6,
        "importPath": "User.Configuration.config",
        "description": "User.Configuration.config",
        "peekOfCode": "class ConfigDevelopment(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_URI\")\nclass ConfigProduction(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_PROD_URI\")\nclass ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "User.Configuration.config",
        "documentation": {}
    },
    {
        "label": "ConfigProduction",
        "kind": 6,
        "importPath": "User.Configuration.config",
        "description": "User.Configuration.config",
        "peekOfCode": "class ConfigProduction(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_PROD_URI\")\nclass ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "User.Configuration.config",
        "documentation": {}
    },
    {
        "label": "ConfigTest",
        "kind": 6,
        "importPath": "User.Configuration.config",
        "description": "User.Configuration.config",
        "peekOfCode": "class ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "User.Configuration.config",
        "documentation": {}
    },
    {
        "label": "determine_role",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def determine_role(user):\n    if Etudiant.query.filter_by(id_user_e=user.id).first():\n        return \"étudiant\"\n    elif Prof.query.filter_by(id_user_p=user.id).first():\n        return \"professeur\"\n    else:\n        return \"inconnu\"\ndef update_aj_column_e():\n    Demande.query.filter((Demande.aj_e == 'nouvelle') | (Demande.aj_e == 'modif'), ((Demande.statut_demande == 'enattente')|(Demande.statut_demande == 'refuse'))).update({'aj_e': 'ancienne'})\n    db.session.commit()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "update_aj_column_e",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def update_aj_column_e():\n    Demande.query.filter((Demande.aj_e == 'nouvelle') | (Demande.aj_e == 'modif'), ((Demande.statut_demande == 'enattente')|(Demande.statut_demande == 'refuse'))).update({'aj_e': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_p():\n    Demande.query.filter((Demande.aj_p == 'nouvelle') | (Demande.aj_p == 'modif'), ((Demande.statut_demande == 'enattente')|(Demande.statut_demande == 'refuse'))).update({'aj_p': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_e_a():\n    Demande.query.filter((Demande.aj_e == 'nouvelle') | (Demande.aj_e == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_e': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_p_a():",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "update_aj_column_p",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def update_aj_column_p():\n    Demande.query.filter((Demande.aj_p == 'nouvelle') | (Demande.aj_p == 'modif'), ((Demande.statut_demande == 'enattente')|(Demande.statut_demande == 'refuse'))).update({'aj_p': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_e_a():\n    Demande.query.filter((Demande.aj_e == 'nouvelle') | (Demande.aj_e == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_e': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_p_a():\n    Demande.query.filter((Demande.aj_p == 'nouvelle') | (Demande.aj_p == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_p': 'ancienne'})\n    db.session.commit()\ndef notif(user_type):",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "update_aj_column_e_a",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def update_aj_column_e_a():\n    Demande.query.filter((Demande.aj_e == 'nouvelle') | (Demande.aj_e == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_e': 'ancienne'})\n    db.session.commit()\ndef update_aj_column_p_a():\n    Demande.query.filter((Demande.aj_p == 'nouvelle') | (Demande.aj_p == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_p': 'ancienne'})\n    db.session.commit()\ndef notif(user_type):\n    user_id=session.get(\"userid\")\n    user=User.query.filter_by(id=user_id).first()\n    if user_type=='professeur':",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "update_aj_column_p_a",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def update_aj_column_p_a():\n    Demande.query.filter((Demande.aj_p == 'nouvelle') | (Demande.aj_p == 'modif'), ((Demande.statut_demande == 'accepte')|(Demande.statut_demande == 'report_demande')|(Demande.statut_demande == 'report_accepte'))).update({'aj_p': 'ancienne'})\n    db.session.commit()\ndef notif(user_type):\n    user_id=session.get(\"userid\")\n    user=User.query.filter_by(id=user_id).first()\n    if user_type=='professeur':\n        nd= Demande.query.filter(Demande.aj_p == \"nouvelle\",Demande.statut_demande==\"enattente\", Demande.id_prof ==user.id).count()\n        np= Demande.query.filter(or_(Demande.statut_demande == \"accepte\", Demande.statut_demande == \"report_accepte\"),Demande.aj_p==\"modif\", Demande.id_prof == user.id).count()\n    elif user_type=='etudiant':",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "notif",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def notif(user_type):\n    user_id=session.get(\"userid\")\n    user=User.query.filter_by(id=user_id).first()\n    if user_type=='professeur':\n        nd= Demande.query.filter(Demande.aj_p == \"nouvelle\",Demande.statut_demande==\"enattente\", Demande.id_prof ==user.id).count()\n        np= Demande.query.filter(or_(Demande.statut_demande == \"accepte\", Demande.statut_demande == \"report_accepte\"),Demande.aj_p==\"modif\", Demande.id_prof == user.id).count()\n    elif user_type=='etudiant':\n        nd= Demande.query.filter(or_(Demande.aj_e == \"nouvelle\", Demande.aj_e == \"modif\"),or_(Demande.statut_demande==\"enattente\",Demande.statut_demande==\"refuse\"), Demande.id_etudiant == user.id).count()\n        np= Demande.query.filter(or_(Demande.statut_demande == \"accepte\", Demande.statut_demande == \"report_demande\"),Demande.aj_e==\"modif\", Demande.id_etudiant == user.id).count()\n    else:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "generate_confirmation_code",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def generate_confirmation_code():\n    return ''.join(random.choice('0123456789ABCDEF') for i in range(6))\ndef is_strong_password(password):\n    if (\n        len(password) >= 8\n        and re.search(r'[A-Z]', password)\n        and re.search(r'\\d', password)\n    ):\n        return True\n    else:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "is_strong_password",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def is_strong_password(password):\n    if (\n        len(password) >= 8\n        and re.search(r'[A-Z]', password)\n        and re.search(r'\\d', password)\n    ):\n        return True\n    else:\n        return False\ndef update_status():",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "update_status",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def update_status():\n    current_datetime = datetime.now()\n    demandes_to_update = Demande.query.filter(Demande.date_fin < current_datetime).all()\n    for demande in demandes_to_update:\n        demande.statut_demande=\"termine\"  # Update the status to \"termine\"\n    db.session.commit() \ndef delete_unpaid_demandes():\n    current_datetime = datetime.now()\n    # Query Demande instances with statut_payement=\"impayer\" and date_acc<current_datetime\n    demandes_to_delete = Demande.query.filter(",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "delete_unpaid_demandes",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def delete_unpaid_demandes():\n    current_datetime = datetime.now()\n    # Query Demande instances with statut_payement=\"impayer\" and date_acc<current_datetime\n    demandes_to_delete = Demande.query.filter(\n        Demande.statut_payement == \"impayer\",\n        Demande.date_acc < current_datetime\n    ).all()\n    for demande in demandes_to_delete:\n        db.session.delete(demande)  # Delete the demande instance\n    db.session.commit()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "delete_expired_demandes",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def delete_expired_demandes():\n    current_datetime = datetime.now()\n    demandes_to_delete = Demande.query.filter(\n        Demande.statut_demande == \"enattente\",\n        Demande.date_acc < current_datetime\n    ).all()\n    for demande in demandes_to_delete:\n        db.session.delete(demande)  # Delete the demande instance\n    db.session.commit()\ndef obtenir_abonnements_et_utilisateurs_meme_groupe(id_abonne):",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "obtenir_abonnements_et_utilisateurs_meme_groupe",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def obtenir_abonnements_et_utilisateurs_meme_groupe(id_abonne):\n    abonne = AbonnementLangue.query.filter_by(id_abonne=id_abonne).first()\n    id_groupe = abonne.id_groupe\n    abonnements_meme_groupe = AbonnementLangue.query.filter_by(id_groupe=id_groupe).all()\n    id_abonnes = [abonnement.id_abonne for abonnement in abonnements_meme_groupe]\n    utilisateurs_meme_groupe = User.query.filter(User.id.in_(id_abonnes)).all()\n    return abonnements_meme_groupe, utilisateurs_meme_groupe\ndef obtenir_dates_samedis_entre_debut_et_fin(id_abonne):\n    abonnement = AbonnementLangue.query.filter_by(id_abonne=id_abonne).first()\n    debut = abonnement.datedebut",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "obtenir_dates_samedis_entre_debut_et_fin",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def obtenir_dates_samedis_entre_debut_et_fin(id_abonne):\n    abonnement = AbonnementLangue.query.filter_by(id_abonne=id_abonne).first()\n    debut = abonnement.datedebut\n    fin = abonnement.datefin\n    dates_samedis = []\n    current_date = debut\n    while current_date <= fin:\n        if current_date.weekday() == 5:  # 5 correspond à samedi\n            dates_samedis.append(current_date+timedelta(hours=16))\n        current_date += timedelta(days=1)",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def send_email(sender_email, recipient_email, subject, body):\n    msg = MIMEMultipart()\n    msg['Subject'] = subject\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n    html_content = MIMEText(body, 'html')\n    msg.attach(html_content)\n    # Paramètres de connexion au serveur SMTP\n    smtp_server = os.getenv('SMTP_SERVER')\n    smtp_port = 587",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "generate_pseudo",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def generate_pseudo(length=10):\n    characters = string.ascii_letters + string.digits\n    pseudo = ''.join(random.choice(characters) for _ in range(length))\n    return pseudo\ndef uuidv4():\n    choices = '0123456789abcdef'\n    uuid = ''.join(random.choice(choices) for _ in range(8)) + '-' + \\\n           ''.join(random.choice(choices) for _ in range(4)) + '-' + \\\n           '4' + ''.join(random.choice(choices) for _ in range(3)) + '-' + \\\n           random.choice('89ab') + ''.join(random.choice(choices) for _ in range(3)) + '-' + \\",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "uuidv4",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def uuidv4():\n    choices = '0123456789abcdef'\n    uuid = ''.join(random.choice(choices) for _ in range(8)) + '-' + \\\n           ''.join(random.choice(choices) for _ in range(4)) + '-' + \\\n           '4' + ''.join(random.choice(choices) for _ in range(3)) + '-' + \\\n           random.choice('89ab') + ''.join(random.choice(choices) for _ in range(3)) + '-' + \\\n           ''.join(random.choice(choices) for _ in range(12))\n    return uuid\ndef supprimer_evenements_expirees():\n    maintenant = datetime.utcnow()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "supprimer_evenements_expirees",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def supprimer_evenements_expirees():\n    maintenant = datetime.utcnow()\n    evenements_expirees = Evenement.query.filter(Evenement.date < maintenant - timedelta(hours=2)).all()\n    for evenement in evenements_expirees:\n        db.session.delete(evenement)\n        db.session.commit()\ndef noteprof(tag,prof_id):\n    prof=Prof.query.filter_by(id=prof_id).first()\n    if tag=='negative':\n        prof.nefatif=prof.nefatif+1",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "noteprof",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def noteprof(tag,prof_id):\n    prof=Prof.query.filter_by(id=prof_id).first()\n    if tag=='negative':\n        prof.nefatif=prof.nefatif+1\n        db.session.commit()\n    elif tag=='positive':\n        prof.positif=prof.positif+1\n        db.session.commit()\n    else:\n        a=0",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "preprocess",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def preprocess(text):\n    new_text = []\n    for t in text.split(\" \"):\n        t = '@user' if t.startswith('@') and len(t) > 1 else t\n        t = 'http' if t.startswith('http') else t\n        new_text.append(t)\n    return \" \".join(new_text)\ndef traduire_vers_anglais(texte):\n    translator = Translator()\n    traduction = translator.translate(texte, src='auto', dest='en')",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "traduire_vers_anglais",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def traduire_vers_anglais(texte):\n    translator = Translator()\n    traduction = translator.translate(texte, src='auto', dest='en')\n    return traduction.text\ndef traduire_vers_francais(texte):\n    translator = Translator()\n    traduction = translator.translate(texte, src='auto', dest='fr')\n    return traduction.text\ndef vue():\n    nombre_reclamations_non_vues = Reclamation.query.filter_by(vue='non').count()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "traduire_vers_francais",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def traduire_vers_francais(texte):\n    translator = Translator()\n    traduction = translator.translate(texte, src='auto', dest='fr')\n    return traduction.text\ndef vue():\n    nombre_reclamations_non_vues = Reclamation.query.filter_by(vue='non').count()\n    return nombre_reclamations_non_vues\ndef generate_pseudo(length=10):\n    characters = string.ascii_letters + string.digits\n    pseudo = ''.join(random.choice(characters) for _ in range(length))",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "vue",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def vue():\n    nombre_reclamations_non_vues = Reclamation.query.filter_by(vue='non').count()\n    return nombre_reclamations_non_vues\ndef generate_pseudo(length=10):\n    characters = string.ascii_letters + string.digits\n    pseudo = ''.join(random.choice(characters) for _ in range(length))\n    return pseudo\ndef ajouter_participants_par_email(emails_concatenated, event_id):\n    emails_list = emails_concatenated.split(';')\n    users = User.query.filter(User.mail.in_(emails_list)).all()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "generate_pseudo",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def generate_pseudo(length=10):\n    characters = string.ascii_letters + string.digits\n    pseudo = ''.join(random.choice(characters) for _ in range(length))\n    return pseudo\ndef ajouter_participants_par_email(emails_concatenated, event_id):\n    emails_list = emails_concatenated.split(';')\n    users = User.query.filter(User.mail.in_(emails_list)).all()\n    for user in users:\n        participation = Participation(id_evenement=event_id, id_participant=user.id)\n        db.session.add(participation)",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "ajouter_participants_par_email",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def ajouter_participants_par_email(emails_concatenated, event_id):\n    emails_list = emails_concatenated.split(';')\n    users = User.query.filter(User.mail.in_(emails_list)).all()\n    for user in users:\n        participation = Participation(id_evenement=event_id, id_participant=user.id)\n        db.session.add(participation)\n    db.session.commit()\ndef get_user_likes(username, all_posts):\n    user_likes = []\n    for post in all_posts:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_user_likes",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_user_likes(username, all_posts):\n    user_likes = []\n    for post in all_posts:\n        if username.us in post[\"likeuser\"]:\n            user_likes.append({\"content\": post[\"content\"]})\n    return user_likes\ndef get_user_shares(username, all_posts):\n    user_shares = []\n    for post in all_posts:\n        if username.us in post[\"username\"]:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_user_shares",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_user_shares(username, all_posts):\n    user_shares = []\n    for post in all_posts:\n        if username.us in post[\"username\"]:\n            user_shares.append({\"content\": post[\"content\"]})\n    return user_shares\ndef get_users_by_nationality(nationality):\n    users = User.query.filter_by(nationalite=nationality).all()\n    user_names = [f\"{user.nom} {user.prenom}\" for user in users]\n    return user_names",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_users_by_nationality",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_users_by_nationality(nationality):\n    users = User.query.filter_by(nationalite=nationality).all()\n    user_names = [f\"{user.nom} {user.prenom}\" for user in users]\n    return user_names\ndef get_posts_by_usernames(posts, usernames):\n    matching_posts = []\n    for post in posts:\n        if post[\"username\"] in usernames:\n            matching_posts.append(post)\n            if len(matching_posts) >= 3:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_posts_by_usernames",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_posts_by_usernames(posts, usernames):\n    matching_posts = []\n    for post in posts:\n        if post[\"username\"] in usernames:\n            matching_posts.append(post)\n            if len(matching_posts) >= 3:\n                break\n    return matching_posts[:3]\ndef add_hash_to_tags(tags):\n    updated_tags = []",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "add_hash_to_tags",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def add_hash_to_tags(tags):\n    updated_tags = []\n    for tag in tags:\n        if not tag.startswith('#'):\n            updated_tags.append('#' + tag)\n        else:\n            updated_tags.append(tag)\n    return updated_tags\ndef suggestion(collection):\n    total_posts = collection.count_documents({})",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "suggestion",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def suggestion(collection):\n    total_posts = collection.count_documents({})\n    # Sélectionnez trois indices aléatoires\n    random_indices = random.sample(range(total_posts), 3)\n    # Récupérez les trois posts aléatoires\n    random_posts = [collection.find().skip(index).limit(1)[0] for index in random_indices]\n    return random\ndef get_new_post_id():\n    new_uuid = uuid.uuid4()\n    new_id = str(new_uuid)[:12]  # Prend les 12 premiers caractères de l'UUID",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_new_post_id",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_new_post_id():\n    new_uuid = uuid.uuid4()\n    new_id = str(new_uuid)[:12]  # Prend les 12 premiers caractères de l'UUID\n    return new_id\ndef get_new_reply_id():\n    new_uuid = uuid.uuid4()\n    new_reply_id = str(new_uuid).replace(\"-\", \"\")[:12]  # Supprime les tirets et prend les 12 premiers caractères\n    return new_reply_id\ndef find_item_by_id(posts, item_id):\n    for post in posts:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_new_reply_id",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_new_reply_id():\n    new_uuid = uuid.uuid4()\n    new_reply_id = str(new_uuid).replace(\"-\", \"\")[:12]  # Supprime les tirets et prend les 12 premiers caractères\n    return new_reply_id\ndef find_item_by_id(posts, item_id):\n    for post in posts:\n        if post['id'] == item_id:\n            return post\n        for reply in post['replies']:\n            if reply['id'] == item_id:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "find_item_by_id",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def find_item_by_id(posts, item_id):\n    for post in posts:\n        if post['id'] == item_id:\n            return post\n        for reply in post['replies']:\n            if reply['id'] == item_id:\n                return reply\n            for subreply in reply['replies']:\n                if subreply['id'] == item_id:\n                    return subreply",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "calcul_age",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def calcul_age(birthdate):\n    if birthdate:\n            birthdate = datetime.strptime(birthdate, '%Y-%m-%d')\n            today = datetime.now()\n            age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))\n            return age\nonline_users = []\n# Simulation d'une tâche en arrière-plan\ndef background_task():\n      global online_users",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "background_task",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def background_task():\n      global online_users\n      if 'last_activity' in session:  \n        last_activity = session.get('last_activity')\n      else:\n          last_activity =datetime.now()\n      last_activity = last_activity.replace(tzinfo=None)\n      if datetime.now() - last_activity > timedelta(minutes=1):\n        online_users.pop(0)\ndef get_current_user():",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_current_user():\n    _current_user=None\n    if session.get(\"userid\"):\n        user=User.query.get(session.get(\"userid\"))\n        if user:\n            _current_user=user\n    if _current_user is None:\n        _current_user=User(\n        nom=\"Visiteur\",\n        prenom=\"Anonyme\",",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "find_stat",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def find_stat(prix):\n    if float(prix)==0:\n        stat=\"gratuit\"\n    else:\n        stat=\"payant\"\n    return stat\ndef format_date_bib(date_added):\n    return date_added.strftime('%I:%M %p | %b %d')\ndef create_new_post(new_post_id, user, title, description, ph, realfilename, username, rol, p, stat, formatted_date, discipline, course_type, prix):\n    new_post = {",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "format_date_bib",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def format_date_bib(date_added):\n    return date_added.strftime('%I:%M %p | %b %d')\ndef create_new_post(new_post_id, user, title, description, ph, realfilename, username, rol, p, stat, formatted_date, discipline, course_type, prix):\n    new_post = {\n        \"id\": new_post_id,\n        \"user_id\": user.id,\n        \"titre\": title,\n        \"description\": description,\n        \"repo\": ph,\n        \"repo_realname\": realfilename,",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "create_new_post",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def create_new_post(new_post_id, user, title, description, ph, realfilename, username, rol, p, stat, formatted_date, discipline, course_type, prix):\n    new_post = {\n        \"id\": new_post_id,\n        \"user_id\": user.id,\n        \"titre\": title,\n        \"description\": description,\n        \"repo\": ph,\n        \"repo_realname\": realfilename,\n        \"username\": username,\n        \"user_star\": ['personne'],",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "save_profile_picture",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def save_profile_picture(uploaded_files, static_path, subdirectory):\n    real_filenames = []\n    paths = []\n    for profile_picture in uploaded_files:\n        if profile_picture:\n            real_filenames.append(profile_picture.filename)\n            current_date = datetime.now()\n            date_string = current_date.strftime(\"%Y%m%d%H%M%S\")\n            file_extension = profile_picture.filename.split('.')[-1]\n            filename = f\"{secure_filename(profile_picture.filename.replace('.', '_'))}_{date_string}.{file_extension}\"",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "save_file",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def save_file(file, static_path, subdirectory):\n    if file:\n        current_date = datetime.now()\n        date_string = current_date.strftime(\"%Y%m%d%H%M%S\")\n        file_extension = file.filename.split('.')[-1]\n        filename = f\"{secure_filename(file.filename.replace('.', '_'))}_{date_string}.{file_extension}\"\n        path = os.path.join(static_path, subdirectory)\n        if not os.path.exists(path):\n            os.makedirs(path)\n        file_path = os.path.join(path, filename)",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "get_prof_list",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def get_prof_list():\n    professeurs = (\n        db.session.query(Prof, User)\n        .join(User, Prof.id_user_p == User.id)\n        .filter(Prof.etoile >= 1)  # Filtrer les professeurs avec au moins 3 étoiles\n        .all()\n    )\n    if professeurs:\n        return professeurs\n    else:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "nombre_accepte",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def nombre_accepte():\n    return Demande.query.filter_by(statut_demande=\"accepte\").count()\ndef nombre_np():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        np,_=notif(session.get(\"role\"))    \n        nombre= np_nombre(us=np)\n    else:\n        nombre= np_nombre(us=0)\n    return nombre\ndef nombre_nd():",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "nombre_np",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def nombre_np():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        np,_=notif(session.get(\"role\"))    \n        nombre= np_nombre(us=np)\n    else:\n        nombre= np_nombre(us=0)\n    return nombre\ndef nombre_nd():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        _,nd=notif(session.get(\"role\"))",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "nombre_nd",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def nombre_nd():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        _,nd=notif(session.get(\"role\"))\n        nombre= nd_nombre(us=nd)\n    else:\n        nd=0\n        nombre= nd_nombre(us=nd)\n    return nombre\ndef nombre_nstud():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "nombre_nstud",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def nombre_nstud():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        n_stud=get_unviewed_actu_count(username)\n        nombre= nstud_nombre(us=n_stud)\n    else:\n        nombre= nstud_nombre(us=0)\n    return nombre\ndef nombre_r():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        nr= number_request()",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "nombre_r",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def nombre_r():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        nr= number_request()\n        nombre_req=nb_req(nr=nr)\n    else:\n        nombre_req=nb_req(nr=0)\n    return nombre_req\ndef username_fromproxy():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        username = user.nom + \" \" + user.prenom",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "username_fromproxy",
        "kind": 2,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "def username_fromproxy():\n    if session.get('role') in [\"etudiant\",\"professeur\"]:\n        username = user.nom + \" \" + user.prenom\n        name=username_fp(us=username)\n    else:\n        name=username_fp(us=\"personne\")\n    return name\nuser=LocalProxy(lambda : get_current_user())\ncurrent_user=LocalProxy(lambda : get_current_user())\nprofesseurs=LocalProxy(lambda : get_prof_list())",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "online_users",
        "kind": 5,
        "importPath": "User.Controllers.fonction",
        "description": "User.Controllers.fonction",
        "peekOfCode": "online_users = []\n# Simulation d'une tâche en arrière-plan\ndef background_task():\n      global online_users\n      if 'last_activity' in session:  \n        last_activity = session.get('last_activity')\n      else:\n          last_activity =datetime.now()\n      last_activity = last_activity.replace(tzinfo=None)\n      if datetime.now() - last_activity > timedelta(minutes=1):",
        "detail": "User.Controllers.fonction",
        "documentation": {}
    },
    {
        "label": "discipline",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def discipline():\n    return render_template('discipline.html')\n@CoursBp.route('/matiere/<discipline>',methods=[\"POST\",\"GET\"])\n@student_login_required_AI\ndef matiere(discipline):\n    if request.method==\"POST\":\n        matiere=request.form[\"selected_discipline\"]\n        session['discipline']=discipline\n        session['matiere']=matiere\n        return redirect(url_for('Cours.chapitre'))",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "matiere",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def matiere(discipline):\n    if request.method==\"POST\":\n        matiere=request.form[\"selected_discipline\"]\n        session['discipline']=discipline\n        session['matiere']=matiere\n        return redirect(url_for('Cours.chapitre'))\n    return render_template('matiere.html',discipline=discipline)\n@CoursBp.route('/chapitre',methods=[\"POST\",\"GET\"])\n@student_login_required_AI\ndef chapitre():",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "chapitre",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def chapitre():\n    if request.method==\"POST\":\n        chapitre=request.form[\"chapitre\"]\n        session['chapitre']=chapitre\n        return redirect(url_for('Cours.date'))\n    return render_template('chapitre.html')\n@CoursBp.route('/epreuve',methods=['POST','GET'])\n@student_login_required_AI\ndef epreuve():\n    if request.method==\"POST\":",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "epreuve",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def epreuve():\n    if request.method==\"POST\":\n        file = request.files['file']\n        if file:\n            current_date = datetime.now()\n            date_string = current_date.strftime(\"%Y%m%d%H%M%S\")\n            file_extension = file.filename.split('.')[-1]\n            filename = f\"{secure_filename(file.filename.replace('.', '_'))}_{date_string}.{file_extension}\"\n            path1=os.getenv(\"Path1\")\n            path2=\"epreuve\"",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def date():\n    if request.method==\"POST\":\n        data = request.get_json()\n        date1= data['dt1']\n        date2= data['dt2']\n        session['date1']=date1\n        session['date2']=date2\n        return redirect(url_for(\"Cours.heure\"))\n    return render_template('date.html')\n@CoursBp.route('/choixprof')",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "choixprof",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def choixprof():\n    return render_template('choixprof.html')\n@CoursBp.route('/get_professeur', methods=['GET'])\ndef get_professeur():\n    try:\n        joined_data = db.session.query(User.id,User.nom, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.vendervous).\\\n            join(Prof, User.id == Prof.id_user_p).all()\n        professeurs_list = []\n        for data in joined_data:\n            prof_dict = {",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "get_professeur",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def get_professeur():\n    try:\n        joined_data = db.session.query(User.id,User.nom, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.vendervous).\\\n            join(Prof, User.id == Prof.id_user_p).all()\n        professeurs_list = []\n        for data in joined_data:\n            prof_dict = {\n                'id':data.id,\n                'nom': data.nom,\n                'prenom': data.prenom,",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "heure",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def heure():\n    if request.method==\"POST\":\n        prix=request.form['prix']\n        temps=request.form['t']\n        session['prix']=prix\n        session['temps']=temps\n        return redirect(url_for('Cours.choixprof'))\n    return render_template('heure.html')\n@CoursBp.route('/creationdemande/<idprof>')\n@student_login_required_AI",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "creationdemande",
        "kind": 2,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "def creationdemande(idprof):\n    if idprof!=\"0\":\n        userprof = User.query.get(idprof)\n        nps=userprof.nom +\" \"+ userprof.prenom\n        body = render_template(\"Mail_demande.html\",user=user)\n        sender_email = os.getenv(\"OUR_MAIL\")\n        send_email(sender_email, userprof.mail,\"Reception de demande\", body)\n    else:\n        nps=\"\"\n    date_demande = datetime.now()",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "CoursBp",
        "kind": 5,
        "importPath": "User.Cours.routes_booking",
        "description": "User.Cours.routes_booking",
        "peekOfCode": "CoursBp = Blueprint(\"Cours\",__name__,template_folder=\"templates\")\n#COURS BOOKING PART\n@CoursBp.route('/discipline')\n@student_login_required_AI\ndef discipline():\n    return render_template('discipline.html')\n@CoursBp.route('/matiere/<discipline>',methods=[\"POST\",\"GET\"])\n@student_login_required_AI\ndef matiere(discipline):\n    if request.method==\"POST\":",
        "detail": "User.Cours.routes_booking",
        "documentation": {}
    },
    {
        "label": "demande",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def demande():\n    user_id = session.get('userid')\n    if session.get(\"role\")==\"etudiant\":\n        update_aj_column_e()\n    if session.get(\"role\")==\"professeur\":\n        update_aj_column_p()\n    delete_expired_demandes() \n    demandeprof =Demande.query.filter(and_(Demande.statut_demande == 'enattente', Demande.id_prof == user_id)).all()\n    demandeprof = sorted(demandeprof, key=lambda demande: demande.id_demande, reverse=True)\n    demandeetudiant = Demande.query.filter(and_(or_(Demande.statut_demande == 'enattente',Demande.statut_demande == 'refuse'), Demande.id_etudiant == user_id,Demande.acceptation==\"non\")).all()",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "detaildmd",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def detaildmd(demande_id):\n    demand = Demande.query.filter_by(id_demande=demande_id).first()\n    etudiant=Etudiant.query.filter_by(id_user_e=demand.id_etudiant).first()\n    etudiant=User.query.filter_by(id=etudiant.id_user_e).first()\n    return render_template('detailsdemande.html',demand=demand,etudiant=etudiant)\n@CoursBp.route('/programme')\n@login_required\ndef programme():\n    user_id = session.get('userid')\n    if session.get(\"role\")==\"etudiant\":",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "programme",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def programme():\n    user_id = session.get('userid')\n    if session.get(\"role\")==\"etudiant\":\n        update_aj_column_e_a()\n    if session.get(\"role\")==\"professeur\":\n        update_aj_column_p_a()\n    date_act = datetime.now()\n    date_act1=date_act + timedelta(hours=2)\n    date_act1= date_act1\n    date_act2=date_act - timedelta(hours=2)",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "offre",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def offre():\n    demandes = Demande.query.filter(and_(Demande.statut_demande == 'enattente', Demande.id_prof ==\"0\")).all()\n    return render_template('offre.html', demands=demandes)\n@CoursBp.route('/accepte_demande/date1/<int:demande_id>/<cd>', methods=['DELETE'])\n@prof_login_required\ndef accepte_demande1(demande_id,cd):\n    if request.method == 'DELETE':\n        demande = Demande.query.filter_by(id_demande=demande_id).first()\n        id_etud=demande.id_etudiant\n        etud=Etudiant.query.filter_by(id=id_etud).first()",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "accepte_demande1",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def accepte_demande1(demande_id,cd):\n    if request.method == 'DELETE':\n        demande = Demande.query.filter_by(id_demande=demande_id).first()\n        id_etud=demande.id_etudiant\n        etud=Etudiant.query.filter_by(id=id_etud).first()\n        etudiant=User.query.filter_by(id=etud.id_user_e).first()\n        if demande:\n            demande.statut_demande=\"accepte\"\n            live=Live(date=demande.date1,id_moderateur=session.get(\"userid\"),id_demande=demande_id)\n            db.session.add(live)",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "accepte_demande2",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def accepte_demande2(demande_id,cd):\n    if request.method == 'DELETE':\n        demande = Demande.query.filter_by(id_demande=demande_id).first()\n        id_etud=demande.id_etudiant\n        etud=Etudiant.query.filter_by(id=id_etud).first()\n        etudiant=User.query.filter_by(id=etud.id_user_e).first()\n        if demande:\n            demande.statut_demande=\"accepte\"\n            demande.acceptation=\"oui\"\n            live=Live(date=demande.date2,id_moderateur=session.get(\"userid\"),id_demande=demande_id)",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "confprof",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def confprof(demande_id):\n    demande=Demande.query.filter_by(id_demande=demande_id)\n    if demande:\n        demande.confprof='oui'\n        db.session.commit()\n        return redirect(url_for('Main.accueil'))\n    else:\n        return jsonify(success=False, message='Demande not found')\n@CoursBp.route('/confetud/<int:demande_id>')\n@student_login_required",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "confetud",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def confetud(demande_id):\n    demande=Demande.query.filter_by(id_demande=demande_id)\n    if demande:\n        demande.confetud='oui'\n        db.session.commit()\n        return redirect(url_for('Main.accueil'))\n    else:\n        return jsonify(success=False, message='Demande not found')\n@CoursBp.route('/accepte_report/<int:demande_id>', methods=['DELETE'])\n@student_login_required",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "accepte_report",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def accepte_report(demande_id):\n    if request.method == 'DELETE':\n        demande = Demande.query.get(demande_id)\n        if demande:\n            live=Live.query.filter_by(id_demande=demande_id).first()\n            demande.statut_demande=\"report_accepte\"\n            demande.acceptation=\"oui\"\n            demande.aj_e=\"modif\"\n            demande.aj_p=\"modif\"\n            demande.date_acc=demande.date_propose",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "delete_demande",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def delete_demande(demande_id):\n    if request.method == 'DELETE':\n        demande = Demande.query.get(demande_id)\n        if demande:\n            db.session.delete(demande)\n            db.session.commit()\n            return jsonify(success=True)\n        else:\n            return jsonify(success=False, message='Demande not found')\n@CoursBp.route('/refuse_demande/<int:demande_id>', methods=['DELETE'])",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "refuse_demande",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def refuse_demande(demande_id):\n    if request.method == 'DELETE':\n        demande = Demande.query.get(demande_id)\n        if demande:\n            demande.statut_demande=\"refuse\"\n            demande.aj_e=\"modif\"\n            demande.aj_p=\"modif\"\n            db.session.commit()\n            return jsonify(success=True)\n        else:",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "report",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def report(demande_id):\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n      # Récupère l'utilisateur de la table User\n    if request.method == 'POST':\n        data = request.get_json()\n        dt1= data['dt1']\n        date1 = datetime.fromisoformat(dt1)\n        demande = Demande.query.filter_by(id_demande=demande_id).first()\n        demande.date_propose=date1\n        demande.aj_e=\"modif\"",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "offreprof",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def offreprof() :\n        offres = Offre.query.all()\n        form_submitted = False\n        user_id = session.get('userid')\n        offres_simulees=offres \n        if request.method == 'POST':\n            form_submitted = True\n            criteria = request.form['criteria']\n            search_query = request.form['search']\n            if criteria == 'matiere':",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "ajoutoffre",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def ajoutoffre() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        return render_template('ajoutoffre.html' )\nALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif'}\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n@CoursBp.route('/traiter_offre', methods=['POST'])\ndef traiter_offre():\n    user_id = session.get('userid')\n    id_prof=int(user_id)",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n@CoursBp.route('/traiter_offre', methods=['POST'])\ndef traiter_offre():\n    user_id = session.get('userid')\n    id_prof=int(user_id)\n    if request.method == 'POST':\n        nom_offre = request.form['nom_offre']\n        description = request.form['description']\n        matiere = request.form['matiere']",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "traiter_offre",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def traiter_offre():\n    user_id = session.get('userid')\n    id_prof=int(user_id)\n    if request.method == 'POST':\n        nom_offre = request.form['nom_offre']\n        description = request.form['description']\n        matiere = request.form['matiere']\n        emplacement = request.form['emplacement']\n        prix = request.form['prix']\n        organisation=request.form['organisation']",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "confirmationoffre",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def confirmationoffre() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        return render_template('confirmationoffre.html' )\n@CoursBp.route('/detailsoffre/<idoffre>')\n@student_prof_login_required_AI\ndef detailsoffre(idoffre) :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        offre = Offre.query.filter_by(id=idoffre).first()\n        prof=Prof.query.filter_by(id=offre.id_prof).first()\n        info_prof=User.query.filter_by(id=prof.id_user_p).first()",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "detailsoffre",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def detailsoffre(idoffre) :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        offre = Offre.query.filter_by(id=idoffre).first()\n        prof=Prof.query.filter_by(id=offre.id_prof).first()\n        info_prof=User.query.filter_by(id=prof.id_user_p).first()\n        return render_template('detailsoffreprof.html',offre=offre,prof=prof,info_prof=info_prof)\n@CoursBp.route('/abonner')\n@student_login_required_AI\ndef abonner() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "abonner",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def abonner() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        souscriptions = SubscriptionOffre.query.filter_by(id_participant=user_id).all()\n        return render_template('abonner.html',offre=offre,souscriptions=souscriptions)\n@CoursBp.route('/cours-crees')\n@prof_login_required_AI\ndef cour_crees() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        prof=Prof.query.filter_by(id_user_p=user_id).first()\n        offre = Offre.query.filter_by(id_prof=prof.id).all()",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "cour_crees",
        "kind": 2,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "def cour_crees() :\n        user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n        prof=Prof.query.filter_by(id_user_p=user_id).first()\n        offre = Offre.query.filter_by(id_prof=prof.id).all()\n        return render_template('cours_crees.html',offre=offre,offres=offre)",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "User.Cours.routes_cours",
        "description": "User.Cours.routes_cours",
        "peekOfCode": "ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif'}\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n@CoursBp.route('/traiter_offre', methods=['POST'])\ndef traiter_offre():\n    user_id = session.get('userid')\n    id_prof=int(user_id)\n    if request.method == 'POST':\n        nom_offre = request.form['nom_offre']\n        description = request.form['description']",
        "detail": "User.Cours.routes_cours",
        "documentation": {}
    },
    {
        "label": "solde",
        "kind": 2,
        "importPath": "User.Cours.routes_solde_prof",
        "description": "User.Cours.routes_solde_prof",
        "peekOfCode": "def solde():\n    user_id = session.get(\"userid\")\n    s=0\n    prof=Prof.query.filter_by(id_user_p=user_id).first()\n    demandeconf=Demande.query.filter_by(id_prof=prof.id,ajout=\"non\",confetud='oui',confprof='oui').all()\n    if demandeconf:\n        for dem in demandeconf:\n            s=s+dem.prix\n        prof.solde=prof.solde+s\n        db.session.commit()",
        "detail": "User.Cours.routes_solde_prof",
        "documentation": {}
    },
    {
        "label": "retrait",
        "kind": 2,
        "importPath": "User.Cours.routes_solde_prof",
        "description": "User.Cours.routes_solde_prof",
        "peekOfCode": "def retrait(montant):\n    user_id = session.get(\"userid\")\n    user_e=User.query.filter_by(id=user_id).first()\n    user = Prof.query.filter_by(id_user_p=user_id).first()\n    user_balance = user.solde\n    username = user_e.nom + \" \" + user_e.prenom\n    if request.method == 'POST':\n        nom = request.form['nom']\n        numero_carte = request.form['numero_carte']\n        montant_retrait = float(montant)",
        "detail": "User.Cours.routes_solde_prof",
        "documentation": {}
    },
    {
        "label": "historiqueretrait",
        "kind": 2,
        "importPath": "User.Cours.routes_solde_prof",
        "description": "User.Cours.routes_solde_prof",
        "peekOfCode": "def historiqueretrait():\n    user_id = session.get(\"userid\")\n    user = Prof.query.filter_by(id_user_p=user_id).first()\n    data=Retrait.query.filter_by(id_demandeur=user.id,statut=\"valide\").all()\n    return render_template('historiqueretrait.html', retraits=data)\n@CoursBp.route('/retrait_info',methods=[\"POST\",\"GET\"])\n@prof_login_required\ndef retrait_info():\n    if request.method == 'POST':\n        montant = request.form['montant']",
        "detail": "User.Cours.routes_solde_prof",
        "documentation": {}
    },
    {
        "label": "retrait_info",
        "kind": 2,
        "importPath": "User.Cours.routes_solde_prof",
        "description": "User.Cours.routes_solde_prof",
        "peekOfCode": "def retrait_info():\n    if request.method == 'POST':\n        montant = request.form['montant']\n        print(montant)\n    user_id = session.get(\"userid\")\n    user = Prof.query.filter_by(id_user_p=user_id).first()\n    data=Retrait.query.filter_by(id_demandeur=user.id,statut=\"valide\").all()\n    username = current_user.nom + \" \" + current_user.prenom\n    return render_template('retrait_info.html', retraits=data,montant=montant)\n#END PROFESSOR PAYEMENT PART",
        "detail": "User.Cours.routes_solde_prof",
        "documentation": {}
    },
    {
        "label": "get_event",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def get_event():\n    try:\n        userid=session.get('userid')\n        # Perform a join between the User and Prof tables to retrieve the data\n        joined_data = db.session.query(Evenement.id_evenement,Evenement.id_organisateur,Evenement.Nom, Evenement.date, Evenement.type_ev, Evenement.nbplace, Evenement.nbplace_occupe, Evenement.lien, Evenement.live, Evenement.vue, Evenement.description, Evenement.photo, Evenement.statut,User.nom,User.prenom,User.id).\\\n            join(User, User.id == Evenement.id_organisateur).all()\n        # Convert the data to a list of dictionaries\n        evenements_participes = [p.id_evenement for p in Participation.query.filter_by(id_participant=userid).all()]\n        professeurs_list = []\n        for data in joined_data:",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "evenement",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def evenement():\n    supprimer_evenements_expirees()\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n     # Récupère l'utilisateur de la table User\n    nombre_de_participations = db.session.query(func.count(Participation.id)).filter_by(id_participant=user_id).scalar()\n    return render_template('evenement.html',ne=nombre_de_participations)\n@EventBp.route('/plusevenement/<typer>')\ndef plusevenement(typer):\n    supprimer_evenements_expirees()\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "plusevenement",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def plusevenement(typer):\n    supprimer_evenements_expirees()\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n     # Récupère l'utilisateur de la table User\n    nombre_de_participations = db.session.query(func.count(Participation.id)).filter_by(id_participant=user_id).scalar()\n    return render_template('plusevenement.html',ne=nombre_de_participations,typer=typer)\n@EventBp.route('/confirmationevent')\ndef confirmationevent():\n    user_id = session.get('userid')\n    return render_template('confirmationevent.html')",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "confirmationevent",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def confirmationevent():\n    user_id = session.get('userid')\n    return render_template('confirmationevent.html')\n@EventBp.route('/ajouterevenement',methods=[\"POST\",\"GET\"])\n@login_required\ndef ajouterevenement():\n    user_id = session.get('userid')\n    user_id = session.get('userid')\n    mails = [user.mail for user in User.query.all()]\n    if request.method==\"POST\":",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "ajouterevenement",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def ajouterevenement():\n    user_id = session.get('userid')\n    user_id = session.get('userid')\n    mails = [user.mail for user in User.query.all()]\n    if request.method==\"POST\":\n        nom=request.form['nom']\n        participant_emails = request.form.getlist('participantEmails[]')\n        # Concaténez les valeurs avec des points-virgules\n        emails_concatenated = ';'.join(participant_emails)\n        typ=request.form['type']",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "get_user_emails",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def get_user_emails():\n    user_emails = [user.mail for user in User.query.all()]  # Supposons que votre modèle User a un champ \"email\"\n    user_emails=[\"vfvsfjsf@hbj.com\",\"sbsfsbhf@vgh.com\",\"sbsfsbhf@vgh.com\"]\n    return jsonify(user_emails)\n@EventBp.route('/effacer_evenement/<int:id_ev>')\n@login_required\ndef effacer_evenement(id_ev):\n    user = User.query.get(int(session.get(\"userid\")))    \n    evenement = Evenement.query.get(id_ev)\n    # Vérifier si l'utilisateur est réellement inscrit à l'événement",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "effacer_evenement",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def effacer_evenement(id_ev):\n    user = User.query.get(int(session.get(\"userid\")))    \n    evenement = Evenement.query.get(id_ev)\n    # Vérifier si l'utilisateur est réellement inscrit à l'événement\n    part = Participation.query.filter_by(id_evenement=id_ev, id_participant=user.id).first()\n    if part:\n        # Mettre à jour le nombre de places occupées et supprimer l'enregistrement de participation\n        evenement.nbplace_occupe -= 1\n        db.session.delete(part)\n        db.session.commit()",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "details_evenements",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def details_evenements(idev) :\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n     # Récupère l'utilisateur de la table User\n    evenement= Evenement.query.filter_by(id_evenement=idev).first()\n    com = CommentEV.query.filter_by(id_ev=idev).all()\n    prof = Prof.query.filter_by(id_user_p=user.id).first()\n    evenement.vue=int(evenement.vue)+1\n    db.session.add(evenement)\n    db.session.commit()\n    if request.method==\"POST\":",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "reserver",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def reserver(id_ev):\n    user = User.query.get(int(session.get(\"userid\")))    \n    evenement = Evenement.query.get(id_ev)\n    # Vérifier s'il y a des places disponibles pour l'événement\n    if evenement.nbplace_occupe < evenement.nbplace:\n        # Mettre à jour le nombre de places occupées\n        evenement.nbplace_occupe += 1\n        db.session.add(evenement)\n        # Créer un nouveau enregistrement de participation pour l'utilisateur et l'événement\n        part = Participation(id_evenement=id_ev, id_participant=user.id)",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "supprimer",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def supprimer(id_ev):\n    evenement = Evenement.query.get(id_ev)\n    db.session.delete(evenement)\n    db.session.commit()\n    return redirect(url_for('Event.evenement'))\n@EventBp.route('/mesevenements')\n@login_required\ndef mesevenements() :\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n     # Récupère l'utilisateur de la table User",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "mesevenements",
        "kind": 2,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "def mesevenements() :\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n     # Récupère l'utilisateur de la table User\n    evenements_participes = [p.id_evenement for p in Participation.query.filter_by(id_participant=user_id).all()]\n    evenements_participes = Evenement.query.filter(Evenement.id_evenement.in_(evenements_participes)).all()\n    # Récupérer tous les événements auxquels l'utilisateur ne participe pas\n    return render_template('mesevenements.html',evenements=evenements_participes)\n#END EVENT PART",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "EventBp",
        "kind": 5,
        "importPath": "User.Event.routes_event",
        "description": "User.Event.routes_event",
        "peekOfCode": "EventBp = Blueprint(\"Event\",__name__,template_folder=\"templates\")\n#EVENT PART\n@EventBp.route('/get_event', methods=['GET'])\ndef get_event():\n    try:\n        userid=session.get('userid')\n        # Perform a join between the User and Prof tables to retrieve the data\n        joined_data = db.session.query(Evenement.id_evenement,Evenement.id_organisateur,Evenement.Nom, Evenement.date, Evenement.type_ev, Evenement.nbplace, Evenement.nbplace_occupe, Evenement.lien, Evenement.live, Evenement.vue, Evenement.description, Evenement.photo, Evenement.statut,User.nom,User.prenom,User.id).\\\n            join(User, User.id == Evenement.id_organisateur).all()\n        # Convert the data to a list of dictionaries",
        "detail": "User.Event.routes_event",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(50))\n    prenom = db.Column(db.String(50))\n    nationalite = db.Column(db.String(50))\n    mail = db.Column(db.String(50))\n    code = db.Column(db.String(50))\n    pseudo=db.Column(db.String(200))\n    date_naiss=db.Column(db.DateTime)\n    ter = db.Column(db.String(50),default=\"non\")",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Etudiant",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Etudiant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_e = db.Column(db.Integer, db.ForeignKey('user.id'))\n    Nvdetud=db.Column(db.String(50))\n    formation=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    filiere=db.Column(db.String(50))\n    ecole=db.Column(db.String(50))\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\nclass Autre(db.Model):",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Autre",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Autre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_a = db.Column(db.Integer, db.ForeignKey('user.id'))\n    age=db.Column(db.Integer)\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\n    vendervous=db.Column(db.String(500))\n# Table Prof\nclass Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Prof",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))\n    formation=db.Column(db.String(50))\n    Nvdetud=db.Column(db.String(50))\n    filiere=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    Diplome=db.Column(db.String(50))\n    discipline=db.Column(db.String(500))\n    valider=db.Column(db.String(50),default=\"non\")",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Retrait",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Retrait(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_demandeur=db.Column(db.Integer, db.ForeignKey('prof.id'))\n    nom = db.Column(db.String(50))\n    numero_carte = db.Column(db.String(50))\n    montant_retrait = db.Column(db.Float)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    statut = db.Column(db.String(50), default='attente')\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    etudiant_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    prof_id = db.Column(db.Integer, db.ForeignKey('prof.id'))\n    commentaire = db.Column(db.String(500))\n    likes = db.Column(db.Integer, default=0)\n    dislikes = db.Column(db.Integer, default=0)\n    commentateurs = db.relationship('User', backref='evnt', foreign_keys=[etudiant_id])\nclass CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "CommentEV",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_ev=db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    commentaire = db.Column(db.String(500))\n    commentateur = db.relationship('User', backref='event', foreign_keys=[user_id])\nclass Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    vue=db.Column(db.String(50),default=\"non\")",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Reclamation",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    vue=db.Column(db.String(50),default=\"non\")\n    traite=db.Column(db.String(50),default=\"non\")\n    contenu = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    util = db.relationship('User', backref='rec', foreign_keys=[user_id])\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "User.Main.Models.models",
        "description": "User.Main.Models.models",
        "peekOfCode": "class Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.Text)\n    date_envoi = db.Column(db.DateTime, default=datetime.utcnow)\n    expediteur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    expediteur = db.relationship('User', backref='messages_envoyes', foreign_keys=[expediteur_id])\n    destinataire_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    destinataire = db.relationship('User', backref='messages_recus', foreign_keys=[destinataire_id])",
        "detail": "User.Main.Models.models",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "def about():\n    return render_template('about.html')\n@MainBp.route('/road')\ndef road():\n    return render_template('road.html')\n@MainBp.route('/faq')\ndef faq():\n    return render_template('faq.html')\n@MainBp.route('/pricing')\ndef pricing():",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "road",
        "kind": 2,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "def road():\n    return render_template('road.html')\n@MainBp.route('/faq')\ndef faq():\n    return render_template('faq.html')\n@MainBp.route('/pricing')\ndef pricing():\n    return render_template('pricing.html')\n@MainBp.route('/envoyermail', methods=['POST'])\ndef envoyermail():",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "faq",
        "kind": 2,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "def faq():\n    return render_template('faq.html')\n@MainBp.route('/pricing')\ndef pricing():\n    return render_template('pricing.html')\n@MainBp.route('/envoyermail', methods=['POST'])\ndef envoyermail():\n    if request.method == 'POST':\n        nom = request.form.get('nom')\n        email = request.form.get('email')",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "pricing",
        "kind": 2,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "def pricing():\n    return render_template('pricing.html')\n@MainBp.route('/envoyermail', methods=['POST'])\ndef envoyermail():\n    if request.method == 'POST':\n        nom = request.form.get('nom')\n        email = request.form.get('email')\n        message = request.form.get('message')\n        # Send password reset email\n        subject = 'Demande de confirmation'",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "envoyermail",
        "kind": 2,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "def envoyermail():\n    if request.method == 'POST':\n        nom = request.form.get('nom')\n        email = request.form.get('email')\n        message = request.form.get('message')\n        # Send password reset email\n        subject = 'Demande de confirmation'\n        body = f'De {nom} mail : {email}.:\\n\\n{message}'\n        sender_email = 'pergoladiy2023@gmail.com'\n        send_email(sender_email, email, subject, body)",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "MainBp",
        "kind": 5,
        "importPath": "User.Main.routes_about",
        "description": "User.Main.routes_about",
        "peekOfCode": "MainBp = Blueprint(\"Main\",__name__,template_folder=\"templates\")\n#ABOUT PART\n@MainBp.route('/about')\ndef about():\n    return render_template('about.html')\n@MainBp.route('/road')\ndef road():\n    return render_template('road.html')\n@MainBp.route('/faq')\ndef faq():",
        "detail": "User.Main.routes_about",
        "documentation": {}
    },
    {
        "label": "acces_interdit",
        "kind": 2,
        "importPath": "User.Main.routes_acces_interdit",
        "description": "User.Main.routes_acces_interdit",
        "peekOfCode": "def acces_interdit():\n    return render_template('acces-interdit.html')\n#END FORBIDDEN ACCES PART",
        "detail": "User.Main.routes_acces_interdit",
        "documentation": {}
    },
    {
        "label": "connexion",
        "kind": 2,
        "importPath": "User.Main.routes_connexion",
        "description": "User.Main.routes_connexion",
        "peekOfCode": "def connexion():\n    existing_admin = Admin.query.filter_by(mail=\"mohammedia14@casa.rabat\").first()\n    # Si aucun enregistrement existant n'est trouvé, créez-en un\n    if not existing_admin:\n        a = Admin(mail=os.getenv(\"ADMIN_MAIL\"), mdp=os.getenv(\"ADMIN_PASS\"), superadmin=\"Oui\")\n        db.session.add(a)\n        db.session.commit()\n    session.clear()\n    text=\"\"\n    if request.method == 'POST':",
        "detail": "User.Main.routes_connexion",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "User.Main.routes_contact",
        "description": "User.Main.routes_contact",
        "peekOfCode": "def users():\n    user_id = session.get('userid')\n    if session.get('role')==\"etudiant\":\n        users= User.query.join(Prof).filter(User.id != user_id).all()\n    if session.get('role')==\"professeur\":\n        users= User.query.join(Etudiant).filter(User.id != user_id).all() \n    # Obtenir la liste des utilisateurs avec lesquels user_id a eu des interactions\n    interactions = (\n        db.session.query(User)\n        .join(Message, (Message.expediteur_id == User.id) | (Message.destinataire_id == User.id))",
        "detail": "User.Main.routes_contact",
        "documentation": {}
    },
    {
        "label": "conversation",
        "kind": 2,
        "importPath": "User.Main.routes_contact",
        "description": "User.Main.routes_contact",
        "peekOfCode": "def conversation(user_id):\n    user_dest=User.query.filter_by(id=user_id).first()\n    user=User.query.get(session.get(\"userid\"))\n    if current_user is None:\n        return \"Utilisateur introuvable\", 404\n    if request.method == 'POST':\n        content = request.form.get('new_message')\n        if content:\n            new_message = Message(contenu=content, date_envoi=datetime.utcnow(), expediteur=user, destinataire=user_dest)\n            db.session.add(new_message)",
        "detail": "User.Main.routes_contact",
        "documentation": {}
    },
    {
        "label": "inject_param",
        "kind": 2,
        "importPath": "User.Main.routes_home",
        "description": "User.Main.routes_home",
        "peekOfCode": "def inject_param():\n    return dict(current_user=current_user,np=np,nd=nd,n_stud=n_stud,user_type=session.get(\"role\"))\n@MainBp.route('/')\ndef visiteur():\n    return redirect(url_for(\"Main.accueil\"))\n@MainBp.route('/accueil')\ndef accueil(): \n    evenements=[]\n    derniere_demande=[]\n    if 'online_users' not in session:",
        "detail": "User.Main.routes_home",
        "documentation": {}
    },
    {
        "label": "visiteur",
        "kind": 2,
        "importPath": "User.Main.routes_home",
        "description": "User.Main.routes_home",
        "peekOfCode": "def visiteur():\n    return redirect(url_for(\"Main.accueil\"))\n@MainBp.route('/accueil')\ndef accueil(): \n    evenements=[]\n    derniere_demande=[]\n    if 'online_users' not in session:\n        session['online_users']=0\n    if session.get('userid') and user.ter==\"oui\":\n        user_id = session.get('userid')",
        "detail": "User.Main.routes_home",
        "documentation": {}
    },
    {
        "label": "accueil",
        "kind": 2,
        "importPath": "User.Main.routes_home",
        "description": "User.Main.routes_home",
        "peekOfCode": "def accueil(): \n    evenements=[]\n    derniere_demande=[]\n    if 'online_users' not in session:\n        session['online_users']=0\n    if session.get('userid') and user.ter==\"oui\":\n        user_id = session.get('userid')\n        evenements_participes = Participation.query.filter_by(id_participant=user_id).all()\n        evenements_ids = [participation.id_evenement for participation in evenements_participes]\n        evenements = Evenement.query.filter(Evenement.id_evenement.in_(evenements_ids)).all()",
        "detail": "User.Main.routes_home",
        "documentation": {}
    },
    {
        "label": "inscription",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def inscription():  \n    text = text = \"\"\n    # Récupérer la liste de nationalités avec leurs noms en anglais et codes alpha-2\n    nationalites_disponibles = [(country.name, country.alpha_2) for country in pycountry.countries]\n    nationalites_disponibles.sort(key=lambda x: x[0])\n    if request.method == \"POST\":\n        nom = request.form['nom']\n        prenom = request.form['prenom']\n        email = request.form['email']\n        password = request.form['password']",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def confirmation(email):\n    t=\"\"\n    if request.method == \"POST\":\n        cd=request.form[\"confirmation_code\"]\n        user = User.query.filter_by(mail=email).first()\n        code=user.code\n        if cd==code:\n            session['userid'] = user.id\n            user.confirmer=\"oui\"\n            db.session.add(user)",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "role",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def role():\n    return render_template('role.html')\n@MainBp.route('/enregistrerprof', methods=['POST','GET'])\ndef enregistrerprof():\n    if session.get('role')==\"etudiant\"  :\n        return redirect(url_for('Main.acces_interdit'))\n    if request.method == 'POST':\n        formation=request.form['formation']\n        niveau=request.form[\"Nvdetud\"]\n        filiere=request.form['filiere']",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "enregistrerprof",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def enregistrerprof():\n    if session.get('role')==\"etudiant\"  :\n        return redirect(url_for('Main.acces_interdit'))\n    if request.method == 'POST':\n        formation=request.form['formation']\n        niveau=request.form[\"Nvdetud\"]\n        filiere=request.form['filiere']\n        ecole=request.form['ecole']\n        diplome=request.form['diplome']\n        date_naiss=request.form['age']",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "enregistreretudiant",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def enregistreretudiant():\n    if session.get('role')==\"professeur\"  :\n        return redirect(url_for('acces_interdit'))\n    if request.method == 'POST':\n        niveau=request.form[\"niveauEtudiant\"]\n        filiere=request.form['filiereEtudiant']\n        ecole=request.form['ecoleEtudiant']\n        date_naiss=request.form['ageEtudiant']\n        age=calcul_age(date_naiss)\n        formation=request.form['formationetud']",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "enregistrerautre",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def enregistrerautre():\n    if session.get('role')==\"professeur\" :\n        return redirect(url_for('Main.acces_interdit'))\n    if request.method == 'POST':\n        date_naiss=request.form['age']\n        age=calcul_age(date_naiss)\n        userid=session.get('userid')\n        vend=request.form['vendervous']\n        user = User.query.filter_by(id=userid).first()\n        autre = Autre(id_user_a=int(userid),age=age,vendervous=vend)",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "confirmationcompte",
        "kind": 2,
        "importPath": "User.Main.routes_inscription",
        "description": "User.Main.routes_inscription",
        "peekOfCode": "def confirmationcompte():\n    return render_template('confirmationcompte.html')\n# END INSCRIPTION PART",
        "detail": "User.Main.routes_inscription",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :\n    groupe=None\n    demande=None\n    live=None\n    est_participant_ou_organisateur=None\n    st=None\n    warning_threshold = timedelta(minutes=15)",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def room(cd) :\n    groupe=None\n    demande=None\n    live=None\n    est_participant_ou_organisateur=None\n    st=None\n    warning_threshold = timedelta(minutes=15)\n    user_id=session.get('userid')\n    cours=Offre.query.filter_by(meet=cd).first()\n    souscriptions = SubscriptionOffre.query.filter_by(id_offre=cours.id,id_participant=user_id).first()",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "endmeet",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def endmeet():\n    return render_template('endmeet.html')\n@socketio.on('audio_transcription')\ndef handle_audio_transcription(data):\n    transcription = data['transcription']\n    transcription=traduire_vers_anglais(transcription)\n    emit('subtitles', {'text': transcription})\n@socketio.on('join room')\ndef on_join_room(data):\n    roomid = data['roomid']",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "handle_audio_transcription",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def handle_audio_transcription(data):\n    transcription = data['transcription']\n    transcription=traduire_vers_anglais(transcription)\n    emit('subtitles', {'text': transcription})\n@socketio.on('join room')\ndef on_join_room(data):\n    roomid = data['roomid']\n    username = data['username']\n    join_room(roomid)\n    socket_room[request.sid] = roomid",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_join_room",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_join_room(data):\n    roomid = data['roomid']\n    username = data['username']\n    join_room(roomid)\n    socket_room[request.sid] = roomid\n    socket_name[request.sid] = username\n    mic_socket[request.sid] = 'off'\n    video_socket[request.sid] = 'off'\n    if roomid in rooms and len(rooms[roomid]) > 0:\n        rooms[roomid].append(request.sid)",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_action",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_action(msg):\n    if msg == 'mute':\n        mic_socket[request.sid] = 'off'\n    elif msg == 'unmute':\n        mic_socket[request.sid] = 'on'\n    elif msg == 'videoon':\n        video_socket[request.sid] = 'on'\n    elif msg == 'videooff':\n        video_socket[request.sid] = 'off'\n    emit('action', {'msg':msg,'sid':request.sid}, room=socket_room[request.sid],broadcast=True)",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "handle_start_speaking",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def handle_start_speaking(nom):\n    message = f' {nom}'\n    emit('display-message', message, broadcast=True)\n@socketio.on('video-offer')\ndef on_video_offer(data):\n    offer, sid = data['offer'], data['sid']\n    emit('video-offer', {\n        'offer': offer,\n        'sender_sid': request.sid,\n        'sender_name': socket_name[request.sid],",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_video_offer",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_video_offer(data):\n    offer, sid = data['offer'], data['sid']\n    emit('video-offer', {\n        'offer': offer,\n        'sender_sid': request.sid,\n        'sender_name': socket_name[request.sid],\n        'mic_status': mic_socket[request.sid],\n        'video_status': video_socket[request.sid]\n    }, room=sid,broadcast=True)\n@socketio.on('video-answer')",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_video_answer",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_video_answer(data):\n    answer, sid = data['answer'], data['sid']\n    emit('video-answer', {'answer': answer, 'sender_sid': request.sid}, room=sid,broadcast=True)\n@socketio.on('new icecandidate')\ndef on_new_icecandidate(data):\n    candidate, sid = data['candidate'], data['sid']\n    emit('new icecandidate', {'candidate': candidate, 'sender_sid': request.sid}, room=sid,broadcast=True)\n@socketio.on('message')\ndef on_message(data):\n    msg, username, roomid, timestamp = data['msg'], data['username'], data['roomid'], data['timestamp']",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_new_icecandidate",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_new_icecandidate(data):\n    candidate, sid = data['candidate'], data['sid']\n    emit('new icecandidate', {'candidate': candidate, 'sender_sid': request.sid}, room=sid,broadcast=True)\n@socketio.on('message')\ndef on_message(data):\n    msg, username, roomid, timestamp = data['msg'], data['username'], data['roomid'], data['timestamp']\n    emit('message', {'msg': msg, 'username': username, 'timestamp': timestamp}, room=roomid,broadcast=True)\n@socketio.on('getCanvas')\ndef on_get_canvas():\n    if socket_room[request.sid] in room_board:",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_message(data):\n    msg, username, roomid, timestamp = data['msg'], data['username'], data['roomid'], data['timestamp']\n    emit('message', {'msg': msg, 'username': username, 'timestamp': timestamp}, room=roomid,broadcast=True)\n@socketio.on('getCanvas')\ndef on_get_canvas():\n    if socket_room[request.sid] in room_board:\n        emit('getCanvas', room_board[socket_room[request.sid]],broadcast=True)\n@socketio.on('draw')\ndef on_draw(data):\n    newx, newy, prevx, prevy, color, size = data['newx'], data['newy'], data['prevx'], data['prevy'], data['color'], data['size']",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_get_canvas",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_get_canvas():\n    if socket_room[request.sid] in room_board:\n        emit('getCanvas', room_board[socket_room[request.sid]],broadcast=True)\n@socketio.on('draw')\ndef on_draw(data):\n    newx, newy, prevx, prevy, color, size = data['newx'], data['newy'], data['prevx'], data['prevy'], data['color'], data['size']\n    emit('draw', {'newx': newx, 'newy': newy, 'prevx': prevx, 'prevy': prevy, 'color': color, 'size': size},\n         room=socket_room[request.sid])\n@socketio.on('clearBoard')\ndef on_clear_board():",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_draw",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_draw(data):\n    newx, newy, prevx, prevy, color, size = data['newx'], data['newy'], data['prevx'], data['prevy'], data['color'], data['size']\n    emit('draw', {'newx': newx, 'newy': newy, 'prevx': prevx, 'prevy': prevy, 'color': color, 'size': size},\n         room=socket_room[request.sid])\n@socketio.on('clearBoard')\ndef on_clear_board():\n    emit('clearBoard', room=socket_room[request.sid])\n@socketio.on('store canvas')\ndef on_store_canvas(url):\n    room_board[socket_room[request.sid]] = url",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_clear_board",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_clear_board():\n    emit('clearBoard', room=socket_room[request.sid])\n@socketio.on('store canvas')\ndef on_store_canvas(url):\n    room_board[socket_room[request.sid]] = url\n@socketio.on('disconnect')\ndef on_disconnect():\n    chatroom = ChatRoom.query.filter_by(user_id=session.get(\"userid\"), room_id=session.get(\"room\")).first()\n    if chatroom:\n        db.session.delete(chatroom)",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_store_canvas",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_store_canvas(url):\n    room_board[socket_room[request.sid]] = url\n@socketio.on('disconnect')\ndef on_disconnect():\n    chatroom = ChatRoom.query.filter_by(user_id=session.get(\"userid\"), room_id=session.get(\"room\")).first()\n    if chatroom:\n        db.session.delete(chatroom)\n        db.session.commit()\n    return\n#END MEETING PART",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "on_disconnect",
        "kind": 2,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "def on_disconnect():\n    chatroom = ChatRoom.query.filter_by(user_id=session.get(\"userid\"), room_id=session.get(\"room\")).first()\n    if chatroom:\n        db.session.delete(chatroom)\n        db.session.commit()\n    return\n#END MEETING PART",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "users = []\nrooms = {}\nsocket_room = {}\nsocket_name = {}\nmic_socket = {}\nvideo_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "rooms",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "rooms = {}\nsocket_room = {}\nsocket_name = {}\nmic_socket = {}\nvideo_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "socket_room",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "socket_room = {}\nsocket_name = {}\nmic_socket = {}\nvideo_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "socket_name",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "socket_name = {}\nmic_socket = {}\nvideo_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :\n    groupe=None",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "mic_socket",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "mic_socket = {}\nvideo_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :\n    groupe=None\n    demande=None",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "video_socket",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "video_socket = {}\nroom_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :\n    groupe=None\n    demande=None\n    live=None",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "room_board",
        "kind": 5,
        "importPath": "User.Main.routes_meet",
        "description": "User.Main.routes_meet",
        "peekOfCode": "room_board = {}\n@socketio.on('connect')\ndef on_connect():\n   print(\"client connecte\")\n@MainBp.route('/room/<cd>', methods=['GET'])\ndef room(cd) :\n    groupe=None\n    demande=None\n    live=None\n    est_participant_ou_organisateur=None",
        "detail": "User.Main.routes_meet",
        "documentation": {}
    },
    {
        "label": "password_reset_request",
        "kind": 2,
        "importPath": "User.Main.routes_password_rec",
        "description": "User.Main.routes_password_rec",
        "peekOfCode": "def password_reset_request():\n    text = ''\n    t=\"\"\n    if request.method == 'POST':\n        email = request.form['email']\n        user = User.query.filter_by(mail=email).first()\n        if user:\n            # Generate a unique token for password reset\n            token = secrets.token_urlsafe(32)\n            user.password_reset_token = token",
        "detail": "User.Main.routes_password_rec",
        "documentation": {}
    },
    {
        "label": "password_reset",
        "kind": 2,
        "importPath": "User.Main.routes_password_rec",
        "description": "User.Main.routes_password_rec",
        "peekOfCode": "def password_reset(token):\n    user_c = User.query.filter_by(password_reset_token=token).first()\n    if user and user.password_reset_expiration > datetime.utcnow():\n        if request.method == 'POST':\n            password = request.form['password']\n            confirm_password = request.form['confirm_password']\n            # Check if the passwords match\n            if password != confirm_password:\n                flash('Les mots de passe ne correspondent pas. Veuillez réessayer.', 'error')\n                return redirect(url_for('Main.password_reset', token=token))",
        "detail": "User.Main.routes_password_rec",
        "documentation": {}
    },
    {
        "label": "invalid_token",
        "kind": 2,
        "importPath": "User.Main.routes_password_rec",
        "description": "User.Main.routes_password_rec",
        "peekOfCode": "def invalid_token() :\n    return render_template('invalid_token.html')\n#END PASSWORD RECOVERY PART",
        "detail": "User.Main.routes_password_rec",
        "documentation": {}
    },
    {
        "label": "checkout_cancel",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def checkout_cancel():\n    return render_template('cancel.html')\n#PAYEMENT MANAGEMENT\n@MainBp.route('/checkout/<amount>/<langue>')\ndef checkout(amount,langue):\n    amount = int(amount)*100\n    return render_template('checkout.html',key=os.getenv(\"STRIPE_PUBLIC_KEY\"),amount=amount,langue=langue)\n@MainBp.route('/create-checkout-session-langue/<langue>/<amount>', methods=['POST'])\ndef create_checkout_session_langue(langue,amount):\n    try:",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def checkout(amount,langue):\n    amount = int(amount)*100\n    return render_template('checkout.html',key=os.getenv(\"STRIPE_PUBLIC_KEY\"),amount=amount,langue=langue)\n@MainBp.route('/create-checkout-session-langue/<langue>/<amount>', methods=['POST'])\ndef create_checkout_session_langue(langue,amount):\n    try:\n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    'price_data': {",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "create_checkout_session_langue",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def create_checkout_session_langue(langue,amount):\n    try:\n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    'price_data': {\n                        'currency': 'usd',\n                        'product_data': {\n                            'name':\"Abonnement de\"+langue,\n                        },",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "charge",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def charge(prix,langue): \n    amount = int(prix)\n    # Amount in cents\n    if amount==800:\n        duree=1\n    elif amount==2000:\n        duree=3\n    else :\n        duree=6\n    amount = int(amount)/100",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "payementdemande",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def payementdemande(id_demande):\n    demande = Demande.query.get(id_demande)\n    amount=demande.prix\n    demande.statut_payement=\"payer\"\n    db.session.commit()\n    amount = int(amount)\n    return render_template('charge.html', amount=amount)\n@MainBp.route('/checkoutdemande/<id_demande>')\ndef checkoutdemande(id_demande):\n    demande = Demande.query.get(id_demande)",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "checkoutdemande",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def checkoutdemande(id_demande):\n    demande = Demande.query.get(id_demande)\n    amount=demande.prix\n    amount = int(amount)*100\n    return render_template('checkoutdemande.html',key=os.getenv(\"STRIPE_PUBLIC_KEY\"),amount=amount,id_demande=id_demande)\n@MainBp.route('/create-checkout-session-demande/<id>', methods=['POST'])\ndef create_checkout_session_demande(id):\n    try:\n        demande = Demande.query.get(id)\n        amount=demande.prix",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "create_checkout_session_demande",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def create_checkout_session_demande(id):\n    try:\n        demande = Demande.query.get(id)\n        amount=demande.prix\n        amount = int(amount)*100\n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    'price_data': {\n                        'currency': 'usd',",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "payementoffre",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def payementoffre(id_offre):\n    offre = Offre.query.get(id_offre)\n    amount=offre.prix\n    part=SubscriptionOffre(id_offre=id_offre,id_participant=user.id)\n    db.session.add(part)\n    db.session.commit()\n    amount = float(amount)\n    return render_template('charge.html', amount=amount)\n@MainBp.route('/checkoutoffre/<id_offre>')\ndef checkoutoffre(id_offre):",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "checkoutoffre",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def checkoutoffre(id_offre):\n    offre = Offre.query.get(id_offre)\n    amount=offre.prix\n    amount = int(amount)*100\n    return render_template('checkoutoffre.html',key=os.getenv(\"STRIPE_PUBLIC_KEY\"),amount=amount,id_offre=id_offre)\n@MainBp.route('/create-checkout-session-offre/<id>', methods=['POST'])\ndef create_checkout_session_offre(id):\n    try:  \n        offre = Offre.query.get(id)\n        amount=offre.prix",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "create_checkout_session_offre",
        "kind": 2,
        "importPath": "User.Main.routes_payement",
        "description": "User.Main.routes_payement",
        "peekOfCode": "def create_checkout_session_offre(id):\n    try:  \n        offre = Offre.query.get(id)\n        amount=offre.prix\n        amount = int(amount)*100\n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    'price_data': {\n                        'currency': 'usd',",
        "detail": "User.Main.routes_payement",
        "documentation": {}
    },
    {
        "label": "modifierprofil",
        "kind": 2,
        "importPath": "User.Main.routes_profil",
        "description": "User.Main.routes_profil",
        "peekOfCode": "def modifierprofil() :\n      # Récupère l'utilisateur de la table User\n    etudiant = Etudiant.query.filter_by(id_user_e=user.id).first()\n    prof = Prof.query.filter_by(id_user_p=user.id).first()\n    autre=Autre.query.filter_by(id_user_a=user.id).first()\n    if session.get(\"role\")==\"etudiant\":\n        profile_picture_path=etudiant.photo\n        if request.method==\"POST\":\n            Nvdetud = request.form['education-level']\n            ecole = request.form['ecole']",
        "detail": "User.Main.routes_profil",
        "documentation": {}
    },
    {
        "label": "profil",
        "kind": 2,
        "importPath": "User.Main.routes_profil",
        "description": "User.Main.routes_profil",
        "peekOfCode": "def profil() :\n    etudiant = Etudiant.query.filter_by(id_user_e=user.id).first()\n    prof = Prof.query.filter_by(id_user_p=user.id).first()\n    autre = Autre.query.filter_by(id_user_a=user.id).first()\n    if session.get(\"role\")==\"professeur\":\n        profile_picture_path=prof.photo\n        idprof=prof.id\n    if session.get(\"role\")==\"etudiant\":\n        profile_picture_path=etudiant.photo\n        idprof=\"\"",
        "detail": "User.Main.routes_profil",
        "documentation": {}
    },
    {
        "label": "profilprof",
        "kind": 2,
        "importPath": "User.Main.routes_profil",
        "description": "User.Main.routes_profil",
        "peekOfCode": "def profilprof(prof_id) :\n    user_id = session.get('userid')  # Récupère l'ID de l'utilisateur à partir de la session\n      # Récupère l'utilisateur de la table User\n    prof = Prof.query.filter_by(id=prof_id,valider=\"oui\").first()\n    userp=User.query.filter_by(id=prof.id_user_p).first()\n    nom=userp.nom\n    prenom=userp.prenom\n    niveau=prof.Nvdetud\n    formation=prof.formation\n    diplome=prof.Diplome",
        "detail": "User.Main.routes_profil",
        "documentation": {}
    },
    {
        "label": "listeprof",
        "kind": 2,
        "importPath": "User.Main.routes_profil",
        "description": "User.Main.routes_profil",
        "peekOfCode": "def listeprof():\n    # Effectuez une jointure entre les tables User et Prof\n    user_id = session.get('userid')\n    # Passez les données à un modèle HTML pour l'affichage\n    return render_template('liste_professeurs.html', professeurs=professeurs,user_id=user_id)\n#END PROFIL MANAGEMENT PART",
        "detail": "User.Main.routes_profil",
        "documentation": {}
    },
    {
        "label": "reclamation",
        "kind": 2,
        "importPath": "User.Main.routes_reclamation",
        "description": "User.Main.routes_reclamation",
        "peekOfCode": "def reclamation():  \n    user_id = session.get(\"userid\")\n    if request.method == \"POST\":\n        contenu = request.form['contenu'] \n        # Créer une nouvelle réclamation dans la base de données\n        reclamation = Reclamation(user_id=user_id, contenu=contenu)\n        db.session.add(reclamation)\n        db.session.commit()\n        # Rediriger l'utilisateur vers une page de confirmation ou une autre page appropriée\n        return redirect(url_for('Main.confirmation_reclamation'))",
        "detail": "User.Main.routes_reclamation",
        "documentation": {}
    },
    {
        "label": "confirmation_reclamation",
        "kind": 2,
        "importPath": "User.Main.routes_reclamation",
        "description": "User.Main.routes_reclamation",
        "peekOfCode": "def confirmation_reclamation():\n    return render_template('confirmation_reclamation.html')\n#END RECLAMATION PART",
        "detail": "User.Main.routes_reclamation",
        "documentation": {}
    },
    {
        "label": "demanderetrait",
        "kind": 2,
        "importPath": "User.Main.routes_retrait",
        "description": "User.Main.routes_retrait",
        "peekOfCode": "def demanderetrait():\n    if session.get('admin')=='connect':\n        dem=Retrait.query.filter_by(statut=\"attente\")\n        n=vue()\n        return render_template(\"demanderetrait.html\",demande=dem,n=n)\n    else:\n        return redirect(url_for('Main.connexion'))\n@MainBp.route('/detailsretrait/<id>')\ndef detailsretrait(id):\n    if session.get('admin')=='connect':",
        "detail": "User.Main.routes_retrait",
        "documentation": {}
    },
    {
        "label": "detailsretrait",
        "kind": 2,
        "importPath": "User.Main.routes_retrait",
        "description": "User.Main.routes_retrait",
        "peekOfCode": "def detailsretrait(id):\n    if session.get('admin')=='connect':\n        dem=Retrait.query.filter_by(id=id).first()\n        prof=Prof.query.filter_by(id=id)\n        user=User.query.filter_by(id=prof.id_user_p)\n        n=vue()\n        return render_template(\"detailsretrait.html\",demand=dem,n=n,user=user)\n    else:\n        return redirect(url_for('Main.connexion'))\n@MainBp.route('/validerretrait/<id>', methods=['GET'])",
        "detail": "User.Main.routes_retrait",
        "documentation": {}
    },
    {
        "label": "tvaliderretrait",
        "kind": 2,
        "importPath": "User.Main.routes_retrait",
        "description": "User.Main.routes_retrait",
        "peekOfCode": "def tvaliderretrait(id):\n    if session.get('admin')=='connect':\n        dem = Retrait.query.get_or_404(id)\n        dem.statut = 'valide'\n        db.session.commit()\n        prof=Prof.query.filter_by(id=dem.id_demandeur).first()\n        prof.solde=prof.solde-dem.montant_retrait\n        db.session.commit()\n        return redirect(url_for('Main.demanderetrait'))\n    else:",
        "detail": "User.Main.routes_retrait",
        "documentation": {}
    },
    {
        "label": "validerprof",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def validerprof(id):\n    if session.get('admin')=='connect':\n        if Prof.query.filter_by(id_user_p=id).first():  \n            prof= Prof.query.filter_by(id_user_p=id).first()\n            prof.valider=\"oui\"\n            db.session.commit()\n            url=\"Admin.vuevaliderprof\"\n        return redirect(url_for(url))\n@MainBp.route('/listeprofs')\ndef listeprofs():",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "listeprofs",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def listeprofs():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"listeprofs.html\",n=n)\n@MainBp.route('/vuevaliderprof')\ndef vuevaliderprof():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"validerprof.html\",n=n)\n@MainBp.route('/listeetudiant')",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "vuevaliderprof",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def vuevaliderprof():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"validerprof.html\",n=n)\n@MainBp.route('/listeetudiant')\ndef listeetudiant():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"listeetudiant.html\",n=n)\n@MainBp.route('/get_professeurs', methods=['GET'])",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "listeetudiant",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def listeetudiant():\n    if session.get('admin')=='connect':\n        n=vue()\n        return render_template(\"listeetudiant.html\",n=n)\n@MainBp.route('/get_professeurs', methods=['GET'])\ndef get_professeurs():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.cv).\\",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "get_professeurs",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def get_professeurs():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Prof.discipline, Prof.formation, Prof.Nvdetud, Prof.Diplome, Prof.etoile,Prof.photo,Prof.valider,Prof.cv).\\\n                join(Prof, User.id == Prof.id_user_p,Prof.valider==\"oui\").all()\n            # Convert the data to a list of dictionaries\n            professeurs_list = []\n            for data in joined_data:\n                prof_dict = {",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "get_etudiants",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def get_etudiants():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            joined_data = db.session.query(User.id,User.nom,User.mail, User.prenom,User.nationalite, Etudiant.age, Etudiant.formation, Etudiant.Nvdetud, Etudiant.filiere, Etudiant.ecole).\\\n                join(Etudiant, User.id == Etudiant.id_user_e).all()\n            # Convert the data to a list of dictionaries\n            professeurs_list = []\n            for data in joined_data:\n                prof_dict = {",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def get_user():\n    if session.get('admin')=='connect':\n        try:\n            # Perform a join between the User and Prof tables to retrieve the data\n            not_in_prof = db.session.query(Prof.id_user_p)\n            not_in_etudiant = db.session.query(Etudiant.id_user_e)\n            # Obtenir les utilisateurs qui ne sont pas dans Prof ou Etudiant\n            joined_data = db.session.query(User.id, User.nom, User.mail, User.prenom, User.nationalite).\\\n                filter(User.id.notin_(not_in_prof)).\\\n                filter(User.id.notin_(not_in_etudiant)).\\",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "effaceruser",
        "kind": 2,
        "importPath": "User.Main.routes_users",
        "description": "User.Main.routes_users",
        "peekOfCode": "def effaceruser(id):\n    if session.get('admin')=='connect':\n        user = User.query.get(id) \n        if Etudiant.query.filter_by(id_user_e=id).first():  \n            etud = Etudiant.query.filter_by(id_user_e=id).first()\n            db.session.delete(etud)\n            db.session.commit()\n            url=\"Admin.listeetudiant\"\n        elif Prof.query.filter_by(id_user_p=id).first():\n            prof=Prof.query.filter_by(id_user_p=id).first()",
        "detail": "User.Main.routes_users",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "User.Models.model_Admin",
        "description": "User.Models.model_Admin",
        "peekOfCode": "class Admin(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    mail = db.Column(db.String(50))\n    mdp=db.Column(db.String(50))\n    superadmin=db.Column(db.String(50))",
        "detail": "User.Models.model_Admin",
        "documentation": {}
    },
    {
        "label": "CoursModel",
        "kind": 6,
        "importPath": "User.Models.model_Bib",
        "description": "User.Models.model_Bib",
        "peekOfCode": "class CoursModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.titre = data.get('titre')\n        self.image = data.get('image')\n        self.description = data.get('description')\n        self.repo = data.get('repo', [])\n        self.repo_realname = data.get('repo_realname', [])\n        self.username = data.get('username')",
        "detail": "User.Models.model_Bib",
        "documentation": {}
    },
    {
        "label": "RequestModel",
        "kind": 6,
        "importPath": "User.Models.model_Bib",
        "description": "User.Models.model_Bib",
        "peekOfCode": "class RequestModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.id_answer = data.get('id_answer', [])\n        self.titre = data.get('titre')\n        self.description = data.get('description')\n        self.username = data.get('username')\n        self.user_answer = data.get('user_answer', [])\n        self.profil = data.get('profil')",
        "detail": "User.Models.model_Bib",
        "documentation": {}
    },
    {
        "label": "Demande",
        "kind": 6,
        "importPath": "User.Models.model_Cours",
        "description": "User.Models.model_Cours",
        "peekOfCode": "class Demande(db.Model):\n    id_demande = db.Column(db.Integer, primary_key=True)\n    id_prof = db.Column(db.Integer, db.ForeignKey('prof.id'))\n    id_live=db.Column(db.Integer, db.ForeignKey('live.id'))\n    code=db.Column(db.String(500))\n    prix=db.Column(db.Float)\n    temps=db.Column(db.String(50))\n    id_etudiant = db.Column(db.Integer, db.ForeignKey('etudiant.id'))\n    date_demande = db.Column(db.DateTime)\n    date_propose = db.Column(db.DateTime)",
        "detail": "User.Models.model_Cours",
        "documentation": {}
    },
    {
        "label": "Live",
        "kind": 6,
        "importPath": "User.Models.model_Cours",
        "description": "User.Models.model_Cours",
        "peekOfCode": "class Live(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.DateTime)\n    id_moderateur = db.Column(db.Integer, db.ForeignKey('user.id'))\n    id_demande = db.Column(db.Integer, db.ForeignKey('demande.id_demande'))\nclass StartLive(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_live = db.Column(db.Integer, db.ForeignKey('live.id'))\n    date = db.Column(db.DateTime)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "User.Models.model_Cours",
        "documentation": {}
    },
    {
        "label": "StartLive",
        "kind": 6,
        "importPath": "User.Models.model_Cours",
        "description": "User.Models.model_Cours",
        "peekOfCode": "class StartLive(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_live = db.Column(db.Integer, db.ForeignKey('live.id'))\n    date = db.Column(db.DateTime)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'))\n    code=db.Column(db.String(500))\nclass Offre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom_offre = db.Column(db.String(50))\n    description = db.Column(db.String(500))",
        "detail": "User.Models.model_Cours",
        "documentation": {}
    },
    {
        "label": "Offre",
        "kind": 6,
        "importPath": "User.Models.model_Cours",
        "description": "User.Models.model_Cours",
        "peekOfCode": "class Offre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom_offre = db.Column(db.String(50))\n    description = db.Column(db.String(500))\n    id_prof = db.Column(db.Integer, db.ForeignKey('prof.id'), nullable=False)\n    matiere = db.Column(db.String(50), nullable=False)\n    organisation = db.Column(db.String(100), nullable=True)\n    type=db.Column(db.String(50))\n    duree=db.Column(db.String(50), nullable=True)\n    Tel=db.Column(db.String(50), nullable=True)",
        "detail": "User.Models.model_Cours",
        "documentation": {}
    },
    {
        "label": "SubscriptionOffre",
        "kind": 6,
        "importPath": "User.Models.model_Cours",
        "description": "User.Models.model_Cours",
        "peekOfCode": "class SubscriptionOffre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_offre = db.Column(db.Integer, db.ForeignKey('offre.id'), nullable=False)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    offre = db.relationship('Offre', foreign_keys=[id_offre], backref=db.backref('subscriptions', lazy=True))",
        "detail": "User.Models.model_Cours",
        "documentation": {}
    },
    {
        "label": "Evenement",
        "kind": 6,
        "importPath": "User.Models.model_Event",
        "description": "User.Models.model_Event",
        "peekOfCode": "class Evenement(db.Model):\n    id_evenement = db.Column(db.Integer, primary_key=True)\n    id_organisateur = db.Column(db.Integer, db.ForeignKey('user.id'))\n    Nom = db.Column(db.String(50))\n    date= db.Column(db.DateTime)\n    type_ev=db.Column(db.String(50))\n    nbplace = db.Column(db.Integer)\n    nbplace_occupe = db.Column(db.Integer, default=0) \n    pays_ville=db.Column(db.String(50)) \n    live=db.Column(db.String(50))",
        "detail": "User.Models.model_Event",
        "documentation": {}
    },
    {
        "label": "Participation",
        "kind": 6,
        "importPath": "User.Models.model_Event",
        "description": "User.Models.model_Event",
        "peekOfCode": "class Participation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_evenement = db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    id_participant=db.Column(db.Integer, db.ForeignKey('user.id'))\nclass CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_ev=db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    commentaire = db.Column(db.String(500))\n    commentateur = db.relationship('User', backref='event', foreign_keys=[user_id])",
        "detail": "User.Models.model_Event",
        "documentation": {}
    },
    {
        "label": "CommentEV",
        "kind": 6,
        "importPath": "User.Models.model_Event",
        "description": "User.Models.model_Event",
        "peekOfCode": "class CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_ev=db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    commentaire = db.Column(db.String(500))\n    commentateur = db.relationship('User', backref='event', foreign_keys=[user_id])",
        "detail": "User.Models.model_Event",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "kind": 6,
        "importPath": "User.Models.model_Furum",
        "description": "User.Models.model_Furum",
        "peekOfCode": "class PostModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.content = data.get('content')\n        self.replies = data.get('replies', [])\n        self.username = data.get('username')\n        self.file = data.get('file', [])\n        self.profil = data.get('profil')\n        self.role = data.get('role')",
        "detail": "User.Models.model_Furum",
        "documentation": {}
    },
    {
        "label": "Survey",
        "kind": 6,
        "importPath": "User.Models.model_Furum",
        "description": "User.Models.model_Furum",
        "peekOfCode": "class Survey:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.question = data.get('question')\n        self.user_id = data.get('user_id')\n        self.date = data.get('date')\n        self.options = data.get('options', {})\n        self.username = data.get('username')\n        self.profil = data.get('profil')\n        self.role = data.get('role')",
        "detail": "User.Models.model_Furum",
        "documentation": {}
    },
    {
        "label": "NotifModel",
        "kind": 6,
        "importPath": "User.Models.model_Furum",
        "description": "User.Models.model_Furum",
        "peekOfCode": "class NotifModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.post_id = data.get('post_id')\n        # self.createur_id = data.get('createur_id')\n        # self.destinateur_id = data.get('destinateur_id')\n        self.createur_name = data.get('createur_name')\n        self.destinateur_name = data.get('destinateur_name')\n        self.statut = data.get('statut')\n        self.text= data.get('text')",
        "detail": "User.Models.model_Furum",
        "documentation": {}
    },
    {
        "label": "ActuModel",
        "kind": 6,
        "importPath": "User.Models.model_Furum",
        "description": "User.Models.model_Furum",
        "peekOfCode": "class ActuModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.post_id = data.get('post_id')\n        self.user_vue = data.get('user_vue', [])",
        "detail": "User.Models.model_Furum",
        "documentation": {}
    },
    {
        "label": "AbonnementLangue",
        "kind": 6,
        "importPath": "User.Models.model_Langue",
        "description": "User.Models.model_Langue",
        "peekOfCode": "class AbonnementLangue(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_abonne = db.Column(db.Integer, db.ForeignKey('user.id'))\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupelangue.id'))\n    datedebut = db.Column(db.DateTime)\n    nb=db.Column(db.Integer,default=1)\n    datefin = db.Column(db.DateTime)\n    duree = db.Column(db.Integer)\n    point = db.Column(db.Integer)\n    nom = db.Column(db.String(50))",
        "detail": "User.Models.model_Langue",
        "documentation": {}
    },
    {
        "label": "groupelangue",
        "kind": 6,
        "importPath": "User.Models.model_Langue",
        "description": "User.Models.model_Langue",
        "peekOfCode": "class groupelangue(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    lien = db.Column(db.String(500))\n    nom = db.Column(db.String(50))\n    abonnements = db.relationship('AbonnementLangue', backref='groupe', lazy=True)\n    def calculate_avg_point(self):\n        total_points = sum(abonnement.point for abonnement in self.abonnements)\n        if len(self.abonnements) > 0:\n            return total_points / len(self.abonnements)\n        return 0",
        "detail": "User.Models.model_Langue",
        "documentation": {}
    },
    {
        "label": "Retrait",
        "kind": 6,
        "importPath": "User.Models.model_Main",
        "description": "User.Models.model_Main",
        "peekOfCode": "class Retrait(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_demandeur=db.Column(db.Integer, db.ForeignKey('prof.id'))\n    nom = db.Column(db.String(50))\n    numero_carte = db.Column(db.String(50))\n    montant_retrait = db.Column(db.Float)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    statut = db.Column(db.String(50), default='attente')\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.model_Main",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "User.Models.model_Main",
        "description": "User.Models.model_Main",
        "peekOfCode": "class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    etudiant_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    prof_id = db.Column(db.Integer, db.ForeignKey('prof.id'))\n    commentaire = db.Column(db.String(500))\n    likes = db.Column(db.Integer, default=0)\n    dislikes = db.Column(db.Integer, default=0)\n    commentateurs = db.relationship('User', backref='evnt', foreign_keys=[etudiant_id])\nclass Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.model_Main",
        "documentation": {}
    },
    {
        "label": "Reclamation",
        "kind": 6,
        "importPath": "User.Models.model_Main",
        "description": "User.Models.model_Main",
        "peekOfCode": "class Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    vue=db.Column(db.String(50),default=\"non\")\n    traite=db.Column(db.String(50),default=\"non\")\n    contenu = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    util = db.relationship('User', backref='rec', foreign_keys=[user_id])\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.model_Main",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "User.Models.model_Main",
        "description": "User.Models.model_Main",
        "peekOfCode": "class Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.Text)\n    date_envoi = db.Column(db.DateTime, default=datetime.utcnow)\n    expediteur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    expediteur = db.relationship('User', backref='messages_envoyes', foreign_keys=[expediteur_id])\n    destinataire_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    destinataire = db.relationship('User', backref='messages_recus', foreign_keys=[destinataire_id])",
        "detail": "User.Models.model_Main",
        "documentation": {}
    },
    {
        "label": "Pomodoro",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Pomodoro(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_utilisateur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    time = db.Column(db.Integer, default=0)\n    utilisateur = db.relationship('User', backref='user_concerne', foreign_keys=[id_utilisateur])\nclass Groupstud(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_createur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    titre = db.Column(db.String)\n    time_debut = db.Column(db.String)",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Groupstud",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Groupstud(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_createur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    titre = db.Column(db.String)\n    time_debut = db.Column(db.String)\n    time_fin = db.Column(db.String)\n    utilisateur = db.relationship('User', backref='groupecreat', foreign_keys=[id_createur])\nclass Grouptasks(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Grouptasks",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Grouptasks(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    tache = db.Column(db.String)\n    utilisateur = db.relationship('Groupstud', backref='grouptask', foreign_keys=[id_groupe])\nclass Groupmessage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    message = db.Column(db.String)\n    audio_data = db.Column(db.LargeBinary)",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Groupmessage",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Groupmessage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    message = db.Column(db.String)\n    audio_data = db.Column(db.LargeBinary)\n    audio_data_path=db.Column(db.String)\n    date_env=db.Column(db.DateTime,default=datetime.utcnow)\n    id_user=db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    utilisateur = db.relationship('User', backref='usermessage', foreign_keys=[id_user])\nclass Groupmember(db.Model):",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Groupmember",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Groupmember(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    id_member =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    statut = db.Column(db.String,default=\"attente\")\n    utilisateur = db.relationship('User', backref='groupmember', foreign_keys=[id_member])\n    groupe = db.relationship('Groupstud', backref='group_groupe', foreign_keys=[id_groupe])\nclass Best_time_25(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Best_time_25",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Best_time_25(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    temps = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_time_25', foreign_keys=[id_us])\nclass Memorix(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    nombre = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_memorix', foreign_keys=[id_us])",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Memorix",
        "kind": 6,
        "importPath": "User.Models.model_Pomodoro",
        "description": "User.Models.model_Pomodoro",
        "peekOfCode": "class Memorix(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    nombre = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_memorix', foreign_keys=[id_us])",
        "detail": "User.Models.model_Pomodoro",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "User.Models.model_Room",
        "description": "User.Models.model_Room",
        "peekOfCode": "class Room(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_creator=db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    subject = db.Column(db.String(200))  # Champ pour le sujet du room\n    messages = db.relationship('MessageRoom', backref='room', lazy=True)\n    users = db.relationship('ChatRoom', backref='room', lazy=True)\n    creator = db.relationship('User', backref='created_rooms', foreign_keys=[id_creator])\nclass ChatRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.model_Room",
        "documentation": {}
    },
    {
        "label": "ChatRoom",
        "kind": 6,
        "importPath": "User.Models.model_Room",
        "description": "User.Models.model_Room",
        "peekOfCode": "class ChatRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'), nullable=True)\nclass MessageRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.String(200))\n    utilisateur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'))\n    pseudo=db.Column(db.String(200))",
        "detail": "User.Models.model_Room",
        "documentation": {}
    },
    {
        "label": "MessageRoom",
        "kind": 6,
        "importPath": "User.Models.model_Room",
        "description": "User.Models.model_Room",
        "peekOfCode": "class MessageRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.String(200))\n    utilisateur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'))\n    pseudo=db.Column(db.String(200))\n    utilisateur = db.relationship('User', backref=db.backref('messages', lazy=True))",
        "detail": "User.Models.model_Room",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "User.Models.model_User",
        "description": "User.Models.model_User",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(50))\n    prenom = db.Column(db.String(50))\n    nationalite = db.Column(db.String(50))\n    mail = db.Column(db.String(50))\n    code = db.Column(db.String(50))\n    pseudo=db.Column(db.String(200))\n    date_naiss=db.Column(db.DateTime)\n    ter = db.Column(db.String(50),default=\"non\")",
        "detail": "User.Models.model_User",
        "documentation": {}
    },
    {
        "label": "Etudiant",
        "kind": 6,
        "importPath": "User.Models.model_User",
        "description": "User.Models.model_User",
        "peekOfCode": "class Etudiant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_e = db.Column(db.Integer, db.ForeignKey('user.id'))\n    Nvdetud=db.Column(db.String(50))\n    formation=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    filiere=db.Column(db.String(50))\n    ecole=db.Column(db.String(50))\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\nclass Autre(db.Model):",
        "detail": "User.Models.model_User",
        "documentation": {}
    },
    {
        "label": "Autre",
        "kind": 6,
        "importPath": "User.Models.model_User",
        "description": "User.Models.model_User",
        "peekOfCode": "class Autre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_a = db.Column(db.Integer, db.ForeignKey('user.id'))\n    age=db.Column(db.Integer)\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\n    vendervous=db.Column(db.String(500))\n# Table Prof\nclass Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "User.Models.model_User",
        "documentation": {}
    },
    {
        "label": "Prof",
        "kind": 6,
        "importPath": "User.Models.model_User",
        "description": "User.Models.model_User",
        "peekOfCode": "class Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))\n    formation=db.Column(db.String(50))\n    Nvdetud=db.Column(db.String(50))\n    filiere=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    Diplome=db.Column(db.String(50))\n    discipline=db.Column(db.String(500))\n    valider=db.Column(db.String(50),default=\"non\")",
        "detail": "User.Models.model_User",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "User.Models.model_User",
        "description": "User.Models.model_User",
        "peekOfCode": "def load_user(user_id):\n    return User.get(user_id)",
        "detail": "User.Models.model_User",
        "documentation": {}
    },
    {
        "label": "np_nombre",
        "kind": 6,
        "importPath": "User.Models.model_utility",
        "description": "User.Models.model_utility",
        "peekOfCode": "class np_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nd_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.model_utility",
        "documentation": {}
    },
    {
        "label": "nd_nombre",
        "kind": 6,
        "importPath": "User.Models.model_utility",
        "description": "User.Models.model_utility",
        "peekOfCode": "class nd_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nstud_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.model_utility",
        "documentation": {}
    },
    {
        "label": "nstud_nombre",
        "kind": 6,
        "importPath": "User.Models.model_utility",
        "description": "User.Models.model_utility",
        "peekOfCode": "class nstud_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass username_fp(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.String,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.model_utility",
        "documentation": {}
    },
    {
        "label": "username_fp",
        "kind": 6,
        "importPath": "User.Models.model_utility",
        "description": "User.Models.model_utility",
        "peekOfCode": "class username_fp(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.String,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nb_req(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nr =db.Column(db.Integer,nullable=False)\n    # def __init__(self,nr):",
        "detail": "User.Models.model_utility",
        "documentation": {}
    },
    {
        "label": "nb_req",
        "kind": 6,
        "importPath": "User.Models.model_utility",
        "description": "User.Models.model_utility",
        "peekOfCode": "class nb_req(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nr =db.Column(db.Integer,nullable=False)\n    # def __init__(self,nr):\n    #     self.id=1\n    #     self.nr=nr",
        "detail": "User.Models.model_utility",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(50))\n    prenom = db.Column(db.String(50))\n    nationalite = db.Column(db.String(50))\n    mail = db.Column(db.String(50))\n    code = db.Column(db.String(50))\n    pseudo=db.Column(db.String(200))\n    date_naiss=db.Column(db.DateTime)\n    ter = db.Column(db.String(50),default=\"non\")",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Admin(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    mail = db.Column(db.String(50))\n    mdp=db.Column(db.String(50))\n    superadmin=db.Column(db.String(50))\nclass Room(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_creator=db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    subject = db.Column(db.String(200))  # Champ pour le sujet du room",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Room(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_creator=db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    subject = db.Column(db.String(200))  # Champ pour le sujet du room\n    messages = db.relationship('MessageRoom', backref='room', lazy=True)\n    users = db.relationship('ChatRoom', backref='room', lazy=True)\n    creator = db.relationship('User', backref='created_rooms', foreign_keys=[id_creator])\nclass ChatRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "ChatRoom",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class ChatRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'), nullable=True)\nclass MessageRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.String(200))\n    utilisateur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'))\n    pseudo=db.Column(db.String(200))",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "MessageRoom",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class MessageRoom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.String(200))\n    utilisateur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'))\n    pseudo=db.Column(db.String(200))\n    utilisateur = db.relationship('User', backref=db.backref('messages', lazy=True))\n# Table Etudiant\nclass Etudiant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Etudiant",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Etudiant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_e = db.Column(db.Integer, db.ForeignKey('user.id'))\n    Nvdetud=db.Column(db.String(50))\n    formation=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    filiere=db.Column(db.String(50))\n    ecole=db.Column(db.String(50))\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\nclass Autre(db.Model):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Autre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Autre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_a = db.Column(db.Integer, db.ForeignKey('user.id'))\n    age=db.Column(db.Integer)\n    photo=db.Column(db.String(50),default=\"static/Profil/unknown.jpg\")\n    vendervous=db.Column(db.String(500))\n# Table Prof\nclass Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Prof",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Prof(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_user_p = db.Column(db.Integer, db.ForeignKey('user.id'))\n    formation=db.Column(db.String(50))\n    Nvdetud=db.Column(db.String(50))\n    filiere=db.Column(db.String(50))\n    age=db.Column(db.Integer)\n    Diplome=db.Column(db.String(50))\n    discipline=db.Column(db.String(500))\n    valider=db.Column(db.String(50),default=\"non\")",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Demande",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Demande(db.Model):\n    id_demande = db.Column(db.Integer, primary_key=True)\n    id_prof = db.Column(db.Integer, db.ForeignKey('prof.id'))\n    id_live=db.Column(db.Integer, db.ForeignKey('live.id'))\n    code=db.Column(db.String(500))\n    prix=db.Column(db.Float)\n    temps=db.Column(db.String(50))\n    id_etudiant = db.Column(db.Integer, db.ForeignKey('etudiant.id'))\n    date_demande = db.Column(db.DateTime)\n    date_propose = db.Column(db.DateTime)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Evenement",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Evenement(db.Model):\n    id_evenement = db.Column(db.Integer, primary_key=True)\n    id_organisateur = db.Column(db.Integer, db.ForeignKey('user.id'))\n    Nom = db.Column(db.String(50))\n    date= db.Column(db.DateTime)\n    type_ev=db.Column(db.String(50))\n    nbplace = db.Column(db.Integer)\n    nbplace_occupe = db.Column(db.Integer, default=0) \n    pays_ville=db.Column(db.String(50)) \n    live=db.Column(db.String(50))",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Participation",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Participation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_evenement = db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    id_participant=db.Column(db.Integer, db.ForeignKey('user.id'))\nclass Retrait(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_demandeur=db.Column(db.Integer, db.ForeignKey('prof.id'))\n    nom = db.Column(db.String(50))\n    numero_carte = db.Column(db.String(50))\n    montant_retrait = db.Column(db.Float)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Retrait",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Retrait(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_demandeur=db.Column(db.Integer, db.ForeignKey('prof.id'))\n    nom = db.Column(db.String(50))\n    numero_carte = db.Column(db.String(50))\n    montant_retrait = db.Column(db.Float)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    statut = db.Column(db.String(50), default='attente')\nclass AbonnementLangue(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "AbonnementLangue",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class AbonnementLangue(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_abonne = db.Column(db.Integer, db.ForeignKey('user.id'))\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupelangue.id'))\n    datedebut = db.Column(db.DateTime)\n    nb=db.Column(db.Integer,default=1)\n    datefin = db.Column(db.DateTime)\n    duree = db.Column(db.Integer)\n    point = db.Column(db.Integer)\n    nom = db.Column(db.String(50))",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "groupelangue",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class groupelangue(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    lien = db.Column(db.String(500))\n    nom = db.Column(db.String(50))\n    abonnements = db.relationship('AbonnementLangue', backref='groupe', lazy=True)\n    def calculate_avg_point(self):\n        total_points = sum(abonnement.point for abonnement in self.abonnements)\n        if len(self.abonnements) > 0:\n            return total_points / len(self.abonnements)\n        return 0",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    etudiant_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    prof_id = db.Column(db.Integer, db.ForeignKey('prof.id'))\n    commentaire = db.Column(db.String(500))\n    likes = db.Column(db.Integer, default=0)\n    dislikes = db.Column(db.Integer, default=0)\n    commentateurs = db.relationship('User', backref='evnt', foreign_keys=[etudiant_id])\nclass CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "CommentEV",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class CommentEV(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_ev=db.Column(db.Integer, db.ForeignKey('evenement.id_evenement'))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    commentaire = db.Column(db.String(500))\n    commentateur = db.relationship('User', backref='event', foreign_keys=[user_id])\nclass Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    vue=db.Column(db.String(50),default=\"non\")",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Reclamation",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Reclamation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    vue=db.Column(db.String(50),default=\"non\")\n    traite=db.Column(db.String(50),default=\"non\")\n    contenu = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    util = db.relationship('User', backref='rec', foreign_keys=[user_id])\nclass Live(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Live",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Live(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.DateTime)\n    id_moderateur = db.Column(db.Integer, db.ForeignKey('user.id'))\n    id_demande = db.Column(db.Integer, db.ForeignKey('demande.id_demande'))\nclass StartLive(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_live = db.Column(db.Integer, db.ForeignKey('live.id'))\n    date = db.Column(db.DateTime)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "StartLive",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class StartLive(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_live = db.Column(db.Integer, db.ForeignKey('live.id'))\n    date = db.Column(db.DateTime)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'))\n    code=db.Column(db.String(500))\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.Text)\n    date_envoi = db.Column(db.DateTime, default=datetime.utcnow)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contenu = db.Column(db.Text)\n    date_envoi = db.Column(db.DateTime, default=datetime.utcnow)\n    expediteur_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    expediteur = db.relationship('User', backref='messages_envoyes', foreign_keys=[expediteur_id])\n    destinataire_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    destinataire = db.relationship('User', backref='messages_recus', foreign_keys=[destinataire_id])\n# Table Offre\nclass Offre(db.Model):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Offre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Offre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nom_offre = db.Column(db.String(50))\n    description = db.Column(db.String(500))\n    id_prof = db.Column(db.Integer, db.ForeignKey('prof.id'), nullable=False)\n    matiere = db.Column(db.String(50), nullable=False)\n    organisation = db.Column(db.String(100), nullable=True)\n    type=db.Column(db.String(50))\n    duree=db.Column(db.String(50), nullable=True)\n    Tel=db.Column(db.String(50), nullable=True)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "SubscriptionOffre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class SubscriptionOffre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_offre = db.Column(db.Integer, db.ForeignKey('offre.id'), nullable=False)\n    id_participant = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    offre = db.relationship('Offre', foreign_keys=[id_offre], backref=db.backref('subscriptions', lazy=True))\nclass Pomodoro(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_utilisateur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    time = db.Column(db.Integer, default=0)\n    utilisateur = db.relationship('User', backref='user_concerne', foreign_keys=[id_utilisateur])",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Pomodoro",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Pomodoro(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_utilisateur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    time = db.Column(db.Integer, default=0)\n    utilisateur = db.relationship('User', backref='user_concerne', foreign_keys=[id_utilisateur])\nclass Groupstud(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_createur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    titre = db.Column(db.String)\n    time_debut = db.Column(db.String)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Groupstud",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Groupstud(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_createur = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    titre = db.Column(db.String)\n    time_debut = db.Column(db.String)\n    time_fin = db.Column(db.String)\n    utilisateur = db.relationship('User', backref='groupecreat', foreign_keys=[id_createur])\nclass Grouptasks(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Grouptasks",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Grouptasks(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    tache = db.Column(db.String)\n    utilisateur = db.relationship('Groupstud', backref='grouptask', foreign_keys=[id_groupe])\nclass Groupmessage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    message = db.Column(db.String)\n    audio_data = db.Column(db.LargeBinary)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Groupmessage",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Groupmessage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    message = db.Column(db.String)\n    audio_data = db.Column(db.LargeBinary)\n    audio_data_path=db.Column(db.String)\n    date_env=db.Column(db.DateTime,default=datetime.utcnow)\n    id_user=db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    utilisateur = db.relationship('User', backref='usermessage', foreign_keys=[id_user])\nclass Groupmember(db.Model):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Groupmember",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Groupmember(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_groupe = db.Column(db.Integer, db.ForeignKey('groupstud.id'), nullable=False)\n    id_member =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    statut = db.Column(db.String,default=\"attente\")\n    utilisateur = db.relationship('User', backref='groupmember', foreign_keys=[id_member])\n    groupe = db.relationship('Groupstud', backref='group_groupe', foreign_keys=[id_groupe])\nclass Best_time_25(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Best_time_25",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Best_time_25(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    temps = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_time_25', foreign_keys=[id_us])\nclass Memorix(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    nombre = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_memorix', foreign_keys=[id_us])",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "Memorix",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class Memorix(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    id_us =db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    nombre = db.Column(db.Integer)\n    utilisateur = db.relationship('User', backref='best_memorix', foreign_keys=[id_us])\nclass np_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "np_nombre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class np_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nd_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "nd_nombre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class nd_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nstud_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "nstud_nombre",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class nstud_nombre(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.Integer,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass username_fp(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.String,nullable=False)\n    # def __init__(self,us):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "username_fp",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class username_fp(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    us =db.Column(db.String,nullable=False)\n    # def __init__(self,us):\n    #     self.id=1\n    #     self.us=us\nclass nb_req(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nr =db.Column(db.Integer,nullable=False)\n    # def __init__(self,nr):",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "nb_req",
        "kind": 6,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "class nb_req(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nr =db.Column(db.Integer,nullable=False)\n    # def __init__(self,nr):\n    #     self.id=1\n    #     self.nr=nr\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.get(user_id)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "User.Models.models",
        "description": "User.Models.models",
        "peekOfCode": "def load_user(user_id):\n    return User.get(user_id)",
        "detail": "User.Models.models",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class PostModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.content = data.get('content')\n        self.replies = data.get('replies', [])\n        self.username = data.get('username')\n        self.file = data.get('file', [])\n        self.profil = data.get('profil')\n        self.role = data.get('role')",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "Survey",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class Survey:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.question = data.get('question')\n        self.user_id = data.get('user_id')\n        self.date = data.get('date')\n        self.options = data.get('options', {})\n        self.username = data.get('username')\n        self.profil = data.get('profil')\n        self.role = data.get('role')",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "CoursModel",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class CoursModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.titre = data.get('titre')\n        self.image = data.get('image')\n        self.description = data.get('description')\n        self.repo = data.get('repo', [])\n        self.repo_realname = data.get('repo_realname', [])\n        self.username = data.get('username')",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "RequestModel",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class RequestModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.user_id = data.get('user_id')\n        self.id_answer = data.get('id_answer', [])\n        self.titre = data.get('titre')\n        self.description = data.get('description')\n        self.username = data.get('username')\n        self.user_answer = data.get('user_answer', [])\n        self.profil = data.get('profil')",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "NotifModel",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class NotifModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.post_id = data.get('post_id')\n        # self.createur_id = data.get('createur_id')\n        # self.destinateur_id = data.get('destinateur_id')\n        self.createur_name = data.get('createur_name')\n        self.destinateur_name = data.get('destinateur_name')\n        self.statut = data.get('statut')\n        self.text= data.get('text')",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "ActuModel",
        "kind": 6,
        "importPath": "User.Models.models_nosql",
        "description": "User.Models.models_nosql",
        "peekOfCode": "class ActuModel:\n    def __init__(self, data):\n        self.id = data.get('id')\n        self.post_id = data.get('post_id')\n        self.user_vue = data.get('user_vue', [])",
        "detail": "User.Models.models_nosql",
        "documentation": {}
    },
    {
        "label": "handle_like_event",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def handle_like_event(data):\n    # Votre logique pour gérer l'événement \"like\"\n    pass\nPomodoroBp = Blueprint(\"Pomodoro\",__name__,template_folder=\"templates\")\n#POMODORO PART\n@PomodoroBp.route('/pomodoro')\n@student_prof_login_required\ndef pomodoro():\n    user_id = session.get('userid')\n    pomodoro = Pomodoro.query.filter_by(id_utilisateur=user_id).first()",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "pomodoro",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def pomodoro():\n    user_id = session.get('userid')\n    pomodoro = Pomodoro.query.filter_by(id_utilisateur=user_id).first()\n    nbrinvit=Groupmember.query.filter_by(id_member=user_id,statut='attente').count()\n    nbrsalle=Groupstud.query.filter_by(id_createur=user_id).count()\n    if not pomodoro :\n        pomodoro=Pomodoro(id_utilisateur=user_id)\n        db.session.add(pomodoro)\n        db.session.commit()\n    classement_users = db.session.query(",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "chambrepomodoro",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def chambrepomodoro():\n    return render_template('chambrepomodoro.html')\n@PomodoroBp.route('/groupestudform')\ndef groupestudform():\n    user_id = session.get('userid')\n    return render_template('groupstudsheet.html')\n@PomodoroBp.route('/groupestudformsave',methods=['GET','POST'])\ndef groupestudformsave():\n    user_id = session.get('userid')\n    if request.method==\"POST\":",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "groupestudform",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def groupestudform():\n    user_id = session.get('userid')\n    return render_template('groupstudsheet.html')\n@PomodoroBp.route('/groupestudformsave',methods=['GET','POST'])\ndef groupestudformsave():\n    user_id = session.get('userid')\n    if request.method==\"POST\":\n        titre=request.form['titre']\n        debut=request.form['debut']\n        fin=request.form['fin']",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "groupestudformsave",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def groupestudformsave():\n    user_id = session.get('userid')\n    if request.method==\"POST\":\n        titre=request.form['titre']\n        debut=request.form['debut']\n        fin=request.form['fin']\n        group=Groupstud(id_createur=user_id,titre=titre,time_debut=debut,time_fin=fin)\n        db.session.add(group)\n        db.session.commit()\n        membre=Groupmember(id_groupe=group.id,id_member=user_id,statut='accepte')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "join_room",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def join_room(data):\n    room = data['room']\n    join_room(room)\n@socketio.on('offer')\ndef handle_offer(data):\n    emit('offer', data, room=data['room'])\n@socketio.on('answer')\ndef handle_answer(data):\n    emit('answer', data, room=data['room'])\n@socketio.on('ice-candidate')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "handle_offer",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def handle_offer(data):\n    emit('offer', data, room=data['room'])\n@socketio.on('answer')\ndef handle_answer(data):\n    emit('answer', data, room=data['room'])\n@socketio.on('ice-candidate')\ndef handle_ice_candidate(data):\n    emit('ice-candidate', data, room=data['room'])\n@PomodoroBp.route('/suppgroupstud/<int:id_group>', methods=['GET', 'POST'])\ndef supprimer_groupstud(id_group):",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "handle_answer",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def handle_answer(data):\n    emit('answer', data, room=data['room'])\n@socketio.on('ice-candidate')\ndef handle_ice_candidate(data):\n    emit('ice-candidate', data, room=data['room'])\n@PomodoroBp.route('/suppgroupstud/<int:id_group>', methods=['GET', 'POST'])\ndef supprimer_groupstud(id_group):\n    groupstud = Groupstud.query.get(id_group)\n    if groupstud:\n        Grouptasks.query.filter_by(id_groupe=id_group).delete()",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "handle_ice_candidate",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def handle_ice_candidate(data):\n    emit('ice-candidate', data, room=data['room'])\n@PomodoroBp.route('/suppgroupstud/<int:id_group>', methods=['GET', 'POST'])\ndef supprimer_groupstud(id_group):\n    groupstud = Groupstud.query.get(id_group)\n    if groupstud:\n        Grouptasks.query.filter_by(id_groupe=id_group).delete()\n        Groupmessage.query.filter_by(id_groupe=id_group).delete()\n        Groupmember.query.filter_by(id_groupe=id_group).delete()\n        db.session.delete(groupstud)",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "supprimer_groupstud",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def supprimer_groupstud(id_group):\n    groupstud = Groupstud.query.get(id_group)\n    if groupstud:\n        Grouptasks.query.filter_by(id_groupe=id_group).delete()\n        Groupmessage.query.filter_by(id_groupe=id_group).delete()\n        Groupmember.query.filter_by(id_groupe=id_group).delete()\n        db.session.delete(groupstud)\n        db.session.commit()\n        return redirect(url_for('Pomodoro.sallelist'))\n@PomodoroBp.route('/ajoutermembre/<int:id_group>/<int:userid>')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "ajoutermembre",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def ajoutermembre(id_group,userid):\n    membre=Groupmember(id_groupe=id_group,id_member=userid)\n    db.session.add(membre)\n    db.session.commit()\n    return redirect(url_for('Pomodoro.groupestud',id_group=id_group))\n@PomodoroBp.route('/statut_change/<int:id>')\ndef statut_change(id):\n    membre=Groupmember.query.filter_by(id=id).first()\n    membre.statut='accepte'\n    db.session.commit()",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "statut_change",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def statut_change(id):\n    membre=Groupmember.query.filter_by(id=id).first()\n    membre.statut='accepte'\n    db.session.commit()\n    return redirect(url_for('Pomodoro.groupestud',id_group=membre.groupe.id))\n@PomodoroBp.route('/refuser_etud/<int:id>')\ndef refuser_etud(id):\n    membre=Groupmember.query.filter_by(id=id).first()\n    db.session.delete(membre)\n    db.session.commit()",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "refuser_etud",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def refuser_etud(id):\n    membre=Groupmember.query.filter_by(id=id).first()\n    db.session.delete(membre)\n    db.session.commit()\n    return redirect(url_for('Pomodoro.groupelist'))\n@PomodoroBp.route('/groupelist')\ndef groupelist():\n    user_id = session.get('userid')\n    grp=Groupmember.query.filter_by(id_member=user_id).all()\n    return render_template('grouplist.html',grp=grp)",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "groupelist",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def groupelist():\n    user_id = session.get('userid')\n    grp=Groupmember.query.filter_by(id_member=user_id).all()\n    return render_template('grouplist.html',grp=grp)\n@PomodoroBp.route('/sallelist')\ndef sallelist():\n    user_id = session.get('userid')\n    grp=Groupstud.query.filter_by(id_createur=user_id).all()\n    return render_template('groupcree.html',grp=grp)\n@PomodoroBp.route('/addtasks/<int:id_group>')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "sallelist",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def sallelist():\n    user_id = session.get('userid')\n    grp=Groupstud.query.filter_by(id_createur=user_id).all()\n    return render_template('groupcree.html',grp=grp)\n@PomodoroBp.route('/addtasks/<int:id_group>')\ndef addtasks(id_group):\n    grp=Groupstud.query.filter_by(id=id_group).first()\n    heuredeb=grp.time_debut\n    heurefin=grp.time_fin\n    return render_template('addtasks.html',id_group=id_group,heuredeb=heuredeb,heurefin=heurefin)",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "addtasks",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def addtasks(id_group):\n    grp=Groupstud.query.filter_by(id=id_group).first()\n    heuredeb=grp.time_debut\n    heurefin=grp.time_fin\n    return render_template('addtasks.html',id_group=id_group,heuredeb=heuredeb,heurefin=heurefin)\n@PomodoroBp.route('/addtasksave/<int:id_group>', methods=['POST'])\ndef addtasksave(id_group):\n    taches_json = request.form['taches']  # Récupérez les tâches au format JSON depuis le formulaire\n    taches = json.loads(taches_json) if taches_json else []\n    for t in taches:",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "addtasksave",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def addtasksave(id_group):\n    taches_json = request.form['taches']  # Récupérez les tâches au format JSON depuis le formulaire\n    taches = json.loads(taches_json) if taches_json else []\n    for t in taches:\n        task = Grouptasks(id_groupe=id_group, tache=t)\n        db.session.add(task)\n        db.session.commit()\n    return redirect(url_for('Pomodoro.groupestud', id_group=id_group))\n@PomodoroBp.route('/groupstud/<id_group>')\ndef groupestud(id_group):",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "groupestud",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def groupestud(id_group):\n    user_id = session.get('userid')\n    grant=Groupmember.query.filter_by(id_member=user_id).first()\n    createur=Groupstud.query.filter_by(id_createur=user_id).first()\n    grp=Groupstud.query.filter_by(id=id_group).first()\n    tasks=Grouptasks.query.filter_by(id_groupe=id_group).all()\n    message=Groupmessage.query.filter_by(id_groupe=id_group).order_by(Groupmessage.date_env).all()\n    # Transformez les tâches en une liste Python\n    task_list = [task.tache for task in tasks]\n    us =User.query.all()",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "effacer_etudiant",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def effacer_etudiant(id):\n    membre=Groupmember.query.filter_by(id=id).first()\n    id_group=membre.groupe.id\n    db.session.delete(membre)\n    db.session.commit()\n    return redirect(url_for('Pomodoro.groupestud',id_group=id_group))\n@socketio.on('message')\ndef handle_message(data):\n    id_msg=None\n    user_id = session.get('userid')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "handle_message",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def handle_message(data):\n    id_msg=None\n    user_id = session.get('userid')\n    content = data['content']\n    user_name=user.nom +\" \"+user.prenom\n    id_group=data['group']\n    if data['call']=='yes':\n      call=data['call']\n      audio_data = data['mp3']  # Les données audio reçues depuis le client\n      if audio_data:",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "get_audio",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def get_audio(audio_id):\n    # 1. Récupérez l'audio depuis la base de données\n    audio_record = Groupmessage.query.filter_by(id=audio_id).first()  # Assurez-vous d'adapter cette partie à votre modèle\n    if not audio_record:\n        return jsonify({\"error\": \"Audio not found\"}), 404\n    # 2. Convertissez les données audio en un objet BytesIO\n    audio_data = audio_record.audio_data_path\n    # 3. Utilisez Flask pour envoyer l'objet BytesIO au client\n    return  jsonify({\"mp3_path\": audio_data})\n@PomodoroBp.route('/update_pomodoro', methods=['POST'])",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "update_pomodoro",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def update_pomodoro():\n    user_id = session.get('userid')\n    pomodoro = Pomodoro.query.filter_by(id_utilisateur=user_id).first()  # Supposons que vous avez une seule entrée dans la table Pomodoro\n    if pomodoro:\n        pomodoro.time += 25  # Ajoutez 25 secondes à la colonne \"time\"\n        db.session.commit()  # Enregistrez la mise à jour dans la base de données\n        return jsonify({'message': 'Mise à jour réussie'})\n    else:\n        return jsonify({'message': 'Aucun enregistrement Pomodoro trouvé'})\n@PomodoroBp.route('/classementpomodoro')",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "classement",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def classement():\n    userid = session.get('userid')\n    # Obtenez la liste des utilisateurs triés par nombre de points\n    classement_users = db.session.query(\n        Pomodoro.id_utilisateur,\n        User.photo,\n        User.mail,\n        Pomodoro.time\n    ).group_by(Pomodoro.id_utilisateur).order_by(db.desc('time')).all()\n    # Créez une liste d'objets contenant le nom, prénom et le temps effectué",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "save_score",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def save_score():\n    tps=Best_time_25.query.filter_by().first()\n    userid = session.get('userid')\n    if request.is_json:\n        data = request.get_json()\n        if 'time' in data:\n            time = data['time']\n            if tps:\n                if tps.temps>time:\n                    tps.temps=time",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "save_memorix",
        "kind": 2,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "def save_memorix():\n    tps=Memorix.query.filter_by().first()\n    userid = session.get('userid')\n    if request.is_json:\n        data = request.get_json()\n        if 'nombre' in data:\n            nombre = data['nombre']\n            if tps:\n                if tps.nombre<nombre:\n                    tps.nombre=nombre",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "PomodoroBp",
        "kind": 5,
        "importPath": "User.Pomodoro.routes_pomodoro",
        "description": "User.Pomodoro.routes_pomodoro",
        "peekOfCode": "PomodoroBp = Blueprint(\"Pomodoro\",__name__,template_folder=\"templates\")\n#POMODORO PART\n@PomodoroBp.route('/pomodoro')\n@student_prof_login_required\ndef pomodoro():\n    user_id = session.get('userid')\n    pomodoro = Pomodoro.query.filter_by(id_utilisateur=user_id).first()\n    nbrinvit=Groupmember.query.filter_by(id_member=user_id,statut='attente').count()\n    nbrsalle=Groupstud.query.filter_by(id_createur=user_id).count()\n    if not pomodoro :",
        "detail": "User.Pomodoro.routes_pomodoro",
        "documentation": {}
    },
    {
        "label": "preprocess",
        "kind": 2,
        "importPath": "User.api.sentiment",
        "description": "User.api.sentiment",
        "peekOfCode": "def preprocess(text):\n    new_text = []\n    for t in text.split(\" \"):\n        t = '@user' if t.startswith('@') and len(t) > 1 else t\n        t = 'http' if t.startswith('http') else t\n        new_text.append(t)\n    return \" \".join(new_text)\ndef comment_sentiment(comment):\n    MODEL = f\"cardiffnlp/twitter-roberta-base-sentiment-latest\"\n    tokenizer = AutoTokenizer.from_pretrained(MODEL)",
        "detail": "User.api.sentiment",
        "documentation": {}
    },
    {
        "label": "comment_sentiment",
        "kind": 2,
        "importPath": "User.api.sentiment",
        "description": "User.api.sentiment",
        "peekOfCode": "def comment_sentiment(comment):\n    MODEL = f\"cardiffnlp/twitter-roberta-base-sentiment-latest\"\n    tokenizer = AutoTokenizer.from_pretrained(MODEL)\n    config = AutoConfig.from_pretrained(MODEL)\n    # PT\n    model = AutoModelForSequenceClassification.from_pretrained(MODEL)\n    #model.save_pretrained(MODEL)\n    text = comment\n    text = preprocess(text)\n    encoded_input = tokenizer(text, return_tensors='pt')",
        "detail": "User.api.sentiment",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('role', sa.String(length=200), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('role')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('role')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "revision = '361c0eb81da9'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('role', sa.String(length=200), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('role', sa.String(length=200), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('role', sa.String(length=200), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.361c0eb81da9_",
        "description": "migrations.versions.361c0eb81da9_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('role', sa.String(length=200), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('role')",
        "detail": "migrations.versions.361c0eb81da9_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('online_user')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('online_user',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('id_user', sa.INTEGER(), nullable=True),\n    sa.Column('last_activity', sa.DATETIME(), nullable=True),",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('online_user',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('id_user', sa.INTEGER(), nullable=True),\n    sa.Column('last_activity', sa.DATETIME(), nullable=True),\n    sa.ForeignKeyConstraint(['id_user'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "revision = '41d0f5166297'\ndown_revision = 'a7d465920722'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('online_user')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "down_revision = 'a7d465920722'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('online_user')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('online_user',",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('online_user')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('online_user',\n    sa.Column('id', sa.INTEGER(), nullable=False),",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.41d0f5166297_",
        "description": "migrations.versions.41d0f5166297_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('online_user')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('online_user',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('id_user', sa.INTEGER(), nullable=True),",
        "detail": "migrations.versions.41d0f5166297_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('nd_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('nstud_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('username_fp')\n    op.drop_table('nstud_nombre')\n    op.drop_table('nd_nombre')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "revision = 'a7d465920722'\ndown_revision = 'cadd5c1ca264'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('nd_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "down_revision = 'cadd5c1ca264'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('nd_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('nd_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('nstud_nombre',",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.a7d465920722_",
        "description": "migrations.versions.a7d465920722_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('nd_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('nstud_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.a7d465920722_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('np_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('np_nombre')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "revision = 'cadd5c1ca264'\ndown_revision = '361c0eb81da9'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('np_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "down_revision = '361c0eb81da9'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('np_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('np_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.cadd5c1ca264_",
        "description": "migrations.versions.cadd5c1ca264_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('np_nombre',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('us', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.cadd5c1ca264_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def app():\n    app=create_app(conf=\"Test\")\n    with app.app_context():\n        db.create_all()\n    yield app\n@pytest.fixture()\ndef client(app):\n    return app.test_client()",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def client(app):\n    return app.test_client()",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_inscription",
        "kind": 2,
        "importPath": "tests.test_project",
        "description": "tests.test_project",
        "peekOfCode": "def test_inscription(client, app):\n    data = {\n        'nom': 'Tests',\n        'prenom': 'Users',\n        'email': 'test@examples.com',\n        'password': 'Cuadrado2002',\n        'Confirm_password': 'Cuadrado2002',\n        'nationalite': 'FR'\n    }\n    response = client.post('/inscription', data=data)",
        "detail": "tests.test_project",
        "documentation": {}
    },
    {
        "label": "test_connexion",
        "kind": 2,
        "importPath": "tests.test_project",
        "description": "tests.test_project",
        "peekOfCode": "def test_connexion(client,app):\n        response = client.post('/connexion', data=dict(\n            email='test@examples.com',\n            password='Cuadrado2002'\n        ))\n        with app.app_context():\n            assert response.status_code == 302",
        "detail": "tests.test_project",
        "documentation": {}
    },
    {
        "label": "set_secure_headers",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def set_secure_headers(response):\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n    response.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    response.headers['X-XSS-Protection'] = '1; mode=block'\n    return response\n@app.before_request\ndef update_session_time():\n    if user.id not in processed_requests and user.id is not None:\n        last_activity_key = f'last_activity:{user.id}'\n        redis_store.set(last_activity_key, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), ex=3)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "update_session_time",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update_session_time():\n    if user.id not in processed_requests and user.id is not None:\n        last_activity_key = f'last_activity:{user.id}'\n        redis_store.set(last_activity_key, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), ex=3)\n        session['online_users'] = len(redis_store.keys('last_activity:*'))\n        processed_requests[user.id] = True\nif __name__==\"__main__\":  \n    socketio.run(app,port=int(os.getenv(\"PORT\")),debug=os.getenv(\"DEBUG\"))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "processed_requests",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "processed_requests = {}\n#SECURITY HEADER\n@app.after_request\ndef set_secure_headers(response):\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n    response.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    response.headers['X-XSS-Protection'] = '1; mode=block'\n    return response\n@app.before_request\ndef update_session_time():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n        SQLALCHEMY_TRACK_MODIFICATIONS=os.getenv(\"TRACK_MODIFICATIONS\"),\n        DEBUG_TB_ENABLED=os.getenv(\"DEBUG_TB_ENABLED\"),\n        DEBUG_TB_INTERCEPT_REDIRECTS=os.getenv(\"DEBUG_TB_INTERCEPT_REDIRECTS\"),\n        SESSION_TYPE=os.getenv(\"SESSION_TYPE\"),\n        UPLOAD_FOLDER = '/static',\n        REDIS_URL=os.getenv(\"REDIS_URL\"),\n        SECRET_KEY=os.getenv(\"SECRET_KEY\"),\nclass ConfigDevelopment(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_URI\")",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ConfigDevelopment",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ConfigDevelopment(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_URI\")\nclass ConfigProduction(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_PROD_URI\")\nclass ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ConfigProduction",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ConfigProduction(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_PROD_URI\")\nclass ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ConfigTest",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ConfigTest(Config):\n    SQLALCHEMY_DATABASE_URI=os.getenv(\"DATABASE_TEST_URI\")\n    TESTING=True",
        "detail": "config",
        "documentation": {}
    }
]